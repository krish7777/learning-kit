{"version":3,"sources":["components/Course/constants.js","components/TextEditor2/constants.js","components/TextEditor2/action.js","components/TextEditor2/index.js","config.js","components/TextEditor2/LivePreview/index.js","components/BuildCircuitBuilder/constants.js","components/FormBuilder/index.js","components/BuildCircuitBuilder/action.js","components/BuildCircuitBuilder/index.js","components/Modules/constants.js","components/Modules/action.js","components/TextEditor/text.js","components/Modules/index.js","components/TextEditor/index.js","components/Modules/AddModule/constants.js","components/Modules/AddModule/action.js","components/Modules/AddModule/index.js","components/Starter/AddModule/constants.js","components/Starter/AddModule/action.js","components/Starter/AddModule/index.js","components/Modules/Module/index.js","components/Course/AddCourse/constants.js","components/Course/AddCourse/action.js","components/Course/AddCourse/index.js","components/Course/action.js","components/Course/index.js","components/Course/AddIntroduction/index.js","components/Course/AddExperiment/index.js","components/Course/AddSimulation/index.js","components/Course/AddVideoEmbed/index.js","components/Course/AddTroubleshoot/index.js","components/Course/AddBuildCircuit/index.js","components/Course/AddExperimentForm/index.js","components/Course/AddExcercise/index.js","components/CreatorHome/index.js","components/Course/AddResults/index.js","utils/setAuthToken.js","components/Auth/constants.js","components/Auth/action.js","components/Auth/Login.js","components/Auth/PrivateRoute.js","components/TextEditor2/reducer.js","components/Modules/reducer.js","components/Modules/AddModule/reducer.js","components/Course/AddCourse/reducer.js","components/Course/reducer.js","components/Auth/reducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["ACTION","GET_CURRENT_COURSE","GET_CURRENT_PARENT","SET_INTRODUCTION_HTML","ADD_INTRODUCTION_SUCCESS","GET_INTRODCUTION_HTML","CLEAR_INTRODUCTION","ADD_BUILD_CIRCUIT_SUCCESS","GET_BUILD_CIRCUIT","CLEAR_BUILD_CIRCUIT","ADD_EXPERIMENT_SUCCESS","GET_EXPERIMENT","CLEAR_EXPERIMENT","ADD_SIMULATION_SUCCESS","GET_SIMULATION","CLEAR_SIMULATION","ADD_VIDEOEMBED_SUCCESS","GET_VIDEOEMBED","CLEAR_VIDEOEMBED","ADD_EXPERIMENT_FORM_SUCCESS","ADD_RESULTS_SUCCESS","ADD_TROUBLESHOOT_SUCCESS","GET_TROUBLESHOOT","CLEAR_TROUBLESHOOT","ADD_EXCERCISE_SUCCESS","GET_EXCERCISE","CLEAR_EXCERCISE","CLEAR_ADMIN_SUBMODULE","DELETE_TYPE","SET_CONTENT","setTextEditor2Content","content","dispatch","type","payload","TextEditor2","props","handleEditorChange","className","apiKey","value","this","init","height","skin","content_style","menubar","image_dimensions","image_class_list","title","formats","nomargin","selector","classes","plugins","automatic_uploads","image_title","image_caption","file_picker_types","toolbar","file_picker_callback","callback","meta","console","log","input","document","createElement","setAttribute","onchange","a","file","files","Blob","size","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","formData","FormData","set","append","axios","post","then","res","data","process","location","alt","originalName","catch","err","click","paste_data_images","onEditorChange","React","Component","connect","state","textEditor2Reducer","bindActionCreators","style","color","textAlign","margin","dangerouslySetInnerHTML","__html","SET_FORM_DATA","setFormData","BuildCircuitBuilder","Upload","Dragger","openNotificationWithIcon","message","notification","ans","formItemLayoutWithOutLabel","wrapperCol","xs","span","offset","sm","normFile","e","Array","isArray","fileList","length","shift","width","padding","onFinish","val","steps","success","newSteps","map","step","upload_image","upload_side","description","response","name","status","thumbUrl","uid","imagePath","sideImagePath","setState","course_id","List","label","rules","required","fields","add","remove","field","index","key","display","alignItems","flexDirection","Item","fieldKey","TextArea","autoSize","minRows","valuePropName","getValueFromEvent","multiple","accept","customRequest","onSuccess","onError","listType","UploadOutlined","MinusCircleOutlined","fontSize","onClick","alignSelf","PlusOutlined","htmlType","initialValues","action","GET_MODULES","GET_CURRENT_MODULE","GET_COURSE_TROUBLESHOOT","UPDATE_COURSE","UPDATE_SUBMOD","DELETE_SUBMOD","DELETE_MOD","CLEAR_CURRENT_MODULE","CLEAR_ADMIN_DASH","getModules","get","modules","getCurrentModule","id","module","getCourseTroubleshoot","troubleshoot","addCourseTroubleshoot","faqs","updateModule","introduction","updateSubModule","deleteSubModule","deleteModule","clearCurrentModule","clearAdminDash","TextEditor","onChange","useState","setAnswer","newAnswer","TabPane","Tabs","Modules","componentDidMount","match","params","onModDel","event","history","go","changeCurrentWindow","selectedOptionWord","selectedWindow","loading","centered","tab","justify","align","GETTINGSTARTED","maxWidth","justifyContent","to","_id","some","el","find","modulesReducer","courseTroubleshoot","ADD_MODULE_SUCCESS","SET_MODULE_NAME","SET_MODULE_INTRODUCTION","CLEAR_ADD_MODULE","addModule","setModuleName","setModuleIntroduction","clearAddModule","AddModule","handleSubmit","goBack","target","addModuleReducer","AddModuleConf","readOnly","Module","onSubFinish","values","onSubDel","bind","getContent","toUpperCase","labelCol","noStyle","placeholder","textareaName","initialValue","marginLeft","paddingBottom","courses","course","layout","Math","random","currentModule","addCourse","setCourseName","setCourseThumbnail","thumbnailPath","clearAddCourse","AddCourse","module_id","thumbnailArray","thumbnail","thumbnailImage","addCourseReducer","getCurrentCourse","getParentModule","setIntroductionHtml","html","getIntroduction","addIntroduction","intro_id","introduction_id","clearIntroduction","getBuildCircuit","buildCircuit","addBuildCircuit","code","codeStepStart","build_id","clearBuildCircuit","getExperiment","experiment","addExperiment","simulationLink","finalMessage","exp_id","clearExperiment","getSimulation","simulation","addSimulation","sim_id","clearSimulation","getVideoEmbed","videoembed","addVideoEmbed","url","clearVideoEmbed","addExperimentForm","formContent","addResults","results_id","getTroubleshoot","addTroubleshoot","troubleshoot_id","clearTroubleshoot","getExcercise","excercise","addExcercise","excercise_list","excerciseFiles","excerciseFilePaths","excercise_id","clearExcercise","clearAdminSubmodule","deleteType","Course","onDel","parent","danger","pathname","gettingStarted","courseReducer","currentCourse","currentParent","AddIntroduction","introductionHtml","border","classname","AddExperiment","autosize","AddSimulation","AddVideoEmbed","urlEmbed","titleEmbed","AddTroubleshoot","AddBuildCircuit","pres","next","AddExperimentForm","handleAddInput","prevState","questions","uuid","inputModal","handleAddTextarea","textareaModal","handleAddTextEditor","texteditorModal","handleAddNumber","numberModal","handleAddCheckbox","checkboxModal","handleAddText","textModal","handleAddHeading","headingModal","handleAddSwitch","switchModal","handleAddCheckboxgroup","checkboxgroupModal","handleAddRadio","radioModal","handelAddTruthTable","tempTable","tableModal","handleAddUpload","uploadModal","submitForm","expId","handleDeleteItem","delId","new_questions","filter","question","handleDeleteTable","tableID","handleStartTruthTable","tempTabID","tempTableID","texteditormodal","tempValue","expForm","form","formItemLayout","maxRows","Group","rad","checkedChildren","unCheckedChildren","whiteSpace","check","startsWith","defaultValue","disabled","icon","visible","onCancel","footer","destroyOnClose","validateTrigger","whitespace","push","row","AddExcercise","newExcerciseFiles","CreatorHome","backgroundColor","minHeight","fontWeight","borderRadius","bordered","hoverable","cover","src","AddResults","results","setAuthToken","token","defaults","headers","common","loginAdmin","userData","localStorage","setItem","decoded","jwt_decode","setCurrentUser","logoutUser","removeItem","auth","authReducer","useEffect","isAuthenticated","setloading","remember","Password","component","rest","my","render","initialState","addModuleSuccess","addCourseSuccess","require","addIntroductionSuccess","addBuildCircuitSuccess","addExperimentSuccess","addTroubleshootSuccess","addExcerciseSuccess","addSimulationSuccess","addVideoEmbedSuccess","JSON","parse","stringify","isEmpty","user","errors","rootReducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","compose","applyMiddleware","thunk","persistor","persistStore","jwtToken","currentTime","Date","now","exp","window","href","App","editor","theme","background","mode","defaultSelectedKeys","selectedKeys","HomeFilled","path","Login","exact","withRouter","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.069109ec.chunk.js","sourcesContent":["export const ACTION = {\r\n    GET_CURRENT_COURSE: \"GET_CURRENT_COURSE\",\r\n    GET_CURRENT_PARENT: \"GET_CURRENT_PARENT\",\r\n    //<<<<INTRODUCTION>>>>>\r\n    SET_INTRODUCTION_HTML: \"SET_INTRODUCTION_HTML\",\r\n    ADD_INTRODUCTION_SUCCESS: \"ADD_INTRODUCTION_SUCCESS\",\r\n    GET_INTRODCUTION_HTML: \"GET_INTRODUCTION_HTML\",\r\n    CLEAR_INTRODUCTION: \"CLEAR_INTRODUCTION\",\r\n    //<<<BUILD_CIRCUIT>>>>>\r\n\r\n    ADD_BUILD_CIRCUIT_SUCCESS: \"ADD_BUILD_CIRCUIT_SUCCESS\",\r\n    GET_BUILD_CIRCUIT: \"GET_BUILD_CIRCUIT\",\r\n    CLEAR_BUILD_CIRCUIT: \"CLEAR_BUILD_CIRCUIT\",\r\n\r\n    //<<<EXPERIMENT>>>>>\r\n\r\n    ADD_EXPERIMENT_SUCCESS: \"ADD_EXPERIMENT_SUCCESS\",\r\n    GET_EXPERIMENT: \"GET_EXPERIMENT\",\r\n    CLEAR_EXPERIMENT: \"CLEAR_EXPERIMENT\",\r\n\r\n    //<<<SIMULATION>>>>>\r\n\r\n    ADD_SIMULATION_SUCCESS: \"ADD_SIMULATION_SUCCESS\",\r\n    GET_SIMULATION: \"GET_SIMULATION\",\r\n    CLEAR_SIMULATION: \"CLEAR_SIMULATION\",\r\n\r\n    //<<<VIDEOEMBED>>>>>\r\n\r\n    ADD_VIDEOEMBED_SUCCESS: \"ADD_VIDEOEMBED_SUCCESS\",\r\n    GET_VIDEOEMBED: \"GET_VIDEOEMBED\",\r\n    CLEAR_VIDEOEMBED: \"CLEAR_VIDEOEMBED\",\r\n    \r\n\r\n    //<<<EXPERIMENT_FORM>>>>>\r\n\r\n    ADD_EXPERIMENT_FORM_SUCCESS: \"ADD_EXPERIMENT_FORM_SUCCESS\",\r\n\r\n    //<<<EXPERIMENT_FORM>>>>>\r\n\r\n    ADD_RESULTS_SUCCESS: \"ADD_RESULTS_SUCCESS\",\r\n\r\n\r\n    //<<<TROUBLESHOOT>>>>>\r\n\r\n    ADD_TROUBLESHOOT_SUCCESS: \"ADD_TROUBLESHOOT_SUCCESS\",\r\n    GET_TROUBLESHOOT: \"GET_TROUBLESHOOT\",\r\n    CLEAR_TROUBLESHOOT: \"CLEAR_TROUBLESHOOT\",\r\n\r\n    //<<<EXCERCISE>>>>>\r\n\r\n    ADD_EXCERCISE_SUCCESS: \"ADD_EXCERCISE_SUCCESS\",\r\n    GET_EXCERCISE: \"GET_EXCERCISE\",\r\n    CLEAR_EXCERCISE: \"CLEAR_EXCERCISE\",\r\n\r\n    CLEAR_ADMIN_SUBMODULE: \"CLEAR_ADMIN_SUBMODULE\",\r\n    DELETE_TYPE: \"DELETE_TYPE\"\r\n}","export const ACTION = {\r\n    SET_CONTENT: 'SET_CONTENT',\r\n};","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nexport const getSomeData = () => async dispatch => {\r\n    const res = await axios.get(\"/some-api-route\");\r\n    dispatch({\r\n        type: ACTION.GET_SOME_DATA,\r\n        payload: res.data\r\n    })\r\n}\r\n\r\nexport const setTextEditor2Content = (content) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_CONTENT,\r\n        payload: content\r\n    })\r\n}","import React from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport axios from \"axios\"\r\nimport \"./styles.scss\"\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { setTextEditor2Content } from './action';\r\nimport imageCompression from 'browser-image-compression';\r\nimport { baseUrl } from '../../config';\r\n\r\n//JUST UTILITY CODE ONLY!!! NOT PART OF PROJECT\r\n\r\n\r\n\r\nclass TextEditor2 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    handleEditorChange = (content) => {\r\n        this.props.setTextEditor2Content(content)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-editor\">\r\n                <Editor\r\n                    apiKey=\"n7942578kkai07fww91ixztab3vfa874swodd4i2e1ymki4i\"\r\n                    value={this.props.content}\r\n                    init={{\r\n                        // content_css: \"dark\",\r\n                        height: \"90vh\",\r\n                        skin: \"oxide-dark\",\r\n                        content_style: '.mce-content-body{background-color:#041D32; color:white}',\r\n                        menubar: false,\r\n                        image_dimensions: false,\r\n                        image_class_list: [\r\n                            { title: 'Responsive', value: 'img-responsive' }\r\n                        ],\r\n                        formats: {\r\n                            nomargin: { selector: 'figure', classes: 'no-margin' }\r\n                        },\r\n                        plugins: [\r\n                            'advlist autolink lists link image',\r\n                            'charmap print preview anchor help',\r\n                            'searchreplace visualblocks code',\r\n                            'insertdatetime media table paste wordcount emoticons',\r\n\r\n                        ],\r\n                        automatic_uploads: true,\r\n                        image_title: true,\r\n                        image_caption: true,\r\n                        file_picker_types: 'image',\r\n                        toolbar:\r\n                            'undo redo | formatselect | bold italic | \\\r\n            alignleft aligncenter alignright | \\\r\n            bullist numlist outdent indent  | image table  | fontselect fontsizeselect|link | forecolor backcolor  |  emoticons | preview',\r\n\r\n\r\n                        file_picker_callback: (callback, value, meta) => {\r\n                            console.log(\"called\")\r\n                            var input = document.createElement('input');\r\n                            input.setAttribute('type', 'file');\r\n                            input.setAttribute('accept', 'image/*');\r\n                            console.log(\"this\", this)\r\n                            input.onchange = async function () {\r\n                                var file = this.files[0];\r\n                                console.log(\"before compeee\")\r\n                                console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                const options = {\r\n                                    maxSizeMB: 1,\r\n                                    maxWidthOrHeight: 920,\r\n                                    useWebWorker: true\r\n                                }\r\n                                try {\r\n                                    const compressedFile = await imageCompression(file, options);\r\n\r\n                                    console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                    console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                    let formData = new FormData();\r\n                                    formData.set('expId', '12345')\r\n                                    formData.append('file', compressedFile)\r\n\r\n                                    await axios.post(`${baseUrl}/api/upload/introduction`, formData).then(\r\n                                        res => {\r\n                                            console.log(\"res.data\", res.data)\r\n                                            console.log(\"path\", process.env.PUBLIC_URL)\r\n                                            callback(res.data.location, {\r\n                                                alt: res.data.originalName\r\n                                            })\r\n                                        }\r\n                                    ).catch(err => console.log(\"error in uploading image\"))\r\n                                }\r\n                                catch (err) {\r\n                                    console.log(\"an erron man , probly while compressing\")\r\n                                }\r\n\r\n                                // console.log('images', file)\r\n                                // var reader = new FileReader();\r\n                                // reader.onload = function (e) {\r\n                                //   var id = 'blobid' + (new Date()).getTime();\r\n                                //   console.log('name', e.target.result)\r\n                                //   callback('logo192.png', {\r\n                                //     alt: file.name\r\n                                //   })\r\n                                // }\r\n                                // reader.readAsDataURL(file)\r\n                            };\r\n                            input.click()\r\n                        },\r\n                        paste_data_images: true,\r\n                    }}\r\n                    onEditorChange={this.handleEditorChange}\r\n                />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    content: state.textEditor2Reducer.content\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setTextEditor2Content: bindActionCreators(setTextEditor2Content, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TextEditor2);","export const baseUrl = ''\r\nexport const COURSE = \"Course\"\r\nexport const MODULE = \"Module\"\r\nexport const SUBMODULE = \"SubModule\"\r\nexport const GETTINGSTARTED = \"Getting Started\"","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport \"./styles.scss\"\r\n\r\nconst LivePreview = ({ content }) => {\r\n    return (\r\n        <div className=\"live-preview\">\r\n            <h2 style={{ color: \"white\", textAlign: \"center\", margin: \"20px 0\" }}>Live Preview</h2>\r\n            <div className=\"live-preview-frame\" dangerouslySetInnerHTML={{ __html: content }}></div>\r\n            {/* <div>{content}</div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    content: state.textEditor2Reducer.content\r\n})\r\n\r\nexport default connect(mapStateToProps)(LivePreview);\r\n","export const ACTION = {\r\n    SET_FORM_DATA: 'SET_FORM_DATA',\r\n};","import React from 'react'\r\n// import 'react-form-builder2/dist/app.css';\r\n// import { ReactFormBuilder, ReactFormGenerator } from 'react-form-builder2'\r\nimport \"./styles.scss\"\r\nimport { uuid } from 'uuidv4'\r\n\r\n\r\n//JUST UTILITY CODE ONLY!!! NOT PART OF PROJECT\r\n\r\n\r\n\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    Modal,\r\n    InputNumber,\r\n    notification,\r\n    Switch, Upload\r\n} from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\n\r\n\r\nclass FormBuilder extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            inputModal: false,\r\n            textareaModal: false,\r\n            numberModal: false,\r\n            checkboxModal: false,\r\n            radioModal: false,\r\n            switchModal: false,\r\n            checkboxgroupModal: false,\r\n            headingModal: false,\r\n            textModal: false,\r\n            tableModal: false,\r\n            uploadModal: false,\r\n            tempTable: [],\r\n            tempValue: '',\r\n            questions: [],\r\n            questionsExample: [\r\n                {\r\n                    name: \"Username\",\r\n                    type: \"input\",\r\n                    label: \"Usernamedasssssssssssssssssssssssssssssssssssssssssadssssssssssdassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\",\r\n                    required: true\r\n                },\r\n                {\r\n                    name: \"Address\",\r\n                    type: \"textarea\",\r\n                    label: \"Address\",\r\n                    required: true\r\n\r\n                },\r\n                {\r\n                    name: \"Age\",\r\n                    type: \"number\",\r\n                    label: \"Age\",\r\n                    required: true\r\n                },\r\n                {\r\n                    type: \"checkbox\",\r\n                    name: \"Remember\",\r\n                    label: \"Remember\",\r\n                    required: true\r\n\r\n                },\r\n                {\r\n                    type: \"radio\",\r\n                    name: \"Size\",\r\n                    label: \"Size\",\r\n                    values: [\"small\", \"medium\", \"large\"],\r\n                    required: true\r\n                },\r\n                {\r\n                    type: \"checkboxgroup\",\r\n                    name: \"Multiple\",\r\n                    label: \"Multiple\",\r\n                    values: [\"A\", \"D\", \"G\"],\r\n                    required: true\r\n                },\r\n                {\r\n                    type: \"row\",\r\n                    values: [\"A\", \"B\", \"C\"],\r\n                },\r\n                {\r\n                    type: \"row\",\r\n                    values: [\"0\", \"1\", \"_switch_\"],\r\n                },\r\n                {\r\n                    type: \"upload\",\r\n                    name: \"Upload\",\r\n                    label: \"Upload\",\r\n                    required: true\r\n                }\r\n            ],\r\n            answersExample: {\r\n                Username: \"Krishnendu\",\r\n                Address: \"1.Rohit Sharma\\\r\n                2.Shikhar Dhawan\\\r\n                \",\r\n                Size: \"medium\",\r\n                Remember: true,\r\n                Age: 22,\r\n                Multiple: [\"A\", \"G\"]\r\n            },\r\n        }\r\n    }\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message\r\n        });\r\n    };\r\n\r\n    handleAddInput = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"input\", required: required, name: label, label: label }],\r\n                inputModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddTextarea = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"textarea\", required: required, name: label, label: label }],\r\n                textareaModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddNumber = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"number\", required: required, name: label, label: label }],\r\n                numberModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckbox = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"checkbox\", name: label, label: label }],\r\n                checkboxModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddText = ({ label }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"text\", name: label, label: label }],\r\n                textModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddHeading = ({ label, type }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"heading\", name: label, label: type }],\r\n                headingModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddSwitch = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"switch\", name: label, label: label }],\r\n                switchModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckboxgroup = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { type: \"checkboxgroup\", name: label, required: required, label: label, values: values }],\r\n                    checkboxgroupModal: false\r\n                }\r\n            })\r\n    }\r\n    handleAddRadio = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { type: \"radio\", name: label, required: required, label: label, values: values }],\r\n                    radioModal: false\r\n                }\r\n            })\r\n    }\r\n\r\n    handelAddTruthTable = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, ...this.state.tempTable],\r\n                tempTable: [],\r\n                tableModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAddUpload = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"upload\", required: required, name: label, label: label }],\r\n                uploadModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 4 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 20 },\r\n            },\r\n        };\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 4 },\r\n            },\r\n        };\r\n\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            return e && e.fileList;\r\n        };\r\n        return (\r\n            <div className=\"form-builder\">\r\n                <div className=\"preview-form\" >\r\n                    <h2>Live Preview</h2>\r\n                    <Form initialValues={this.state.answers} onFinish={(values) => { console.log(values) }}>\r\n\r\n                        {\r\n                            this.state.questions.map(field => {\r\n                                const { type, name, label, required } = field;\r\n\r\n                                switch (type) {\r\n                                    case 'input': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'textarea': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Input.TextArea autoSize={{ minRows: 3, maxRows: 100 }} />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'number': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <InputNumber />\r\n                                        </Form.Item>\r\n                                    )\r\n                                    case 'checkbox': return (\r\n                                        <Form.Item name={name} valuePropName=\"checked\" label={label} initialValue={false}>\r\n                                            <Checkbox></Checkbox>\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'radio': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Radio.Group>\r\n                                                {field.values.map(rad =>\r\n                                                    <Radio value={rad}>{rad}</Radio>)}\r\n                                            </Radio.Group>\r\n\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'switch': return (\r\n                                        <Form.Item name=\"switch\" label=\"Switch\" valuePropName=\"checked\">\r\n                                            <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'text': {\r\n                                        console.log(label)\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'heading': {\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                {label === 'h1' ? <h1>{name}</h1> : label === 'h2' ? <h2>{name}</h2> : label === 'h3' ? <h3>{name}</h3> : label === 'h4' ? <h4>{name}</h4> : label === 'h5' ? <h5>{name}</h5> : <h6>{name}</h6>}\r\n                                                {/* <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div> */}\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'checkboxgroup': {\r\n                                        return (\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]}>\r\n                                                <Checkbox.Group>\r\n                                                    {field.values.map(check =>\r\n                                                        <Checkbox value={check}>{check}</Checkbox>)}\r\n                                                </Checkbox.Group>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'row': {\r\n                                        return (\r\n                                            <div className=\"truth-table-row\">\r\n                                                {field.values.map(value => {\r\n                                                    if (value.startsWith('_switch_')) {\r\n                                                        return (\r\n                                                            <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                                            </Form.Item>\r\n\r\n                                                        )\r\n                                                        {/* <Form.Item>\r\n                                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                            </Form.Item> */}\r\n                                                    }\r\n                                                    else {\r\n                                                        return (\r\n                                                            <Form.Item >\r\n                                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                            </Form.Item>\r\n                                                        )\r\n                                                    }\r\n                                                })}\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'upload': {\r\n                                        return (\r\n                                            <Form.Item name={name} label={label} valuePropName=\"fileList\" getValueFromEvent={normFile} rules={[\r\n                                                { required: required }]}>\r\n                                                <Upload>\r\n                                                    <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                                                </Upload>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                    default: return null\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                        <Form.Item >\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Submit\r\n                </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"form-tools\">\r\n                    <Button danger onClick={() => this.setState({ questions: [] })}>Delete Form</Button>\r\n                    <Button onClick={() => this.setState({ inputModal: true })}>Input</Button>\r\n                    <Button onClick={() => this.setState({ textareaModal: true })}>Text Area</Button>\r\n                    <Button onClick={() => this.setState({ numberModal: true })}>Input Number</Button>\r\n                    <Button onClick={() => this.setState({ checkboxModal: true })}>Checkbox</Button>\r\n                    <Button onClick={() => this.setState({ checkboxgroupModal: true })}>Checkbox Group</Button>\r\n                    <Button onClick={() => this.setState({ radioModal: true })}>Radio</Button>\r\n                    <Button onClick={() => this.setState({ switchModal: true })}>Switch</Button>\r\n                    <Button onClick={() => this.setState({ textModal: true })}>Text</Button>\r\n                    <Button onClick={() => this.setState({ headingModal: true })}>Heading</Button>\r\n                    <Button onClick={() => this.setState({ tableModal: true })}>Table</Button>\r\n                    <Button onClick={() => this.setState({ uploadModal: true })}>Upload</Button>\r\n\r\n\r\n\r\n                </div>\r\n                <Modal\r\n                    visible={this.state.inputModal}\r\n                    title=\"Input\"\r\n                    onCancel={() => this.setState({ inputModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddInput}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textareaModal}\r\n                    title=\"Text Area\"\r\n                    onCancel={() => this.setState({ textareaModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddTextarea}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.numberModal}\r\n                    title=\"Number\"\r\n                    onCancel={() => this.setState({ numberModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddNumber}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxModal}\r\n                    title=\"Check Box\"\r\n                    onCancel={() => this.setState({ checkboxModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckbox}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.switchModal}\r\n                    title=\"Switch\"\r\n                    onCancel={() => this.setState({ switchModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddSwitch}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textModal}\r\n                    title=\"Text\"\r\n                    onCancel={() => this.setState({ textModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddText}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea autoSize />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.headingModal}\r\n                    title=\"Heading\"\r\n                    onCancel={() => this.setState({ headingModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddHeading}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <p>*The greater the number , smaller the heading</p>\r\n                        <Form.Item\r\n                            label=\"Heading type\"\r\n                            name=\"type\"\r\n                            rules={[{ required: true }]}>\r\n                            <Radio.Group>\r\n                                <Radio value={'h1'}>h1</Radio>\r\n                                <Radio value={'h2'}>h2</Radio>\r\n                                <Radio value={'h3'}>h3</Radio>\r\n                                <Radio value={'h4'}>h4</Radio>\r\n                                <Radio value={'h5'}>h5</Radio>\r\n                                <Radio value={'h6'}>h6</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxgroupModal}\r\n                    title=\"CheckBox Group\"\r\n                    onCancel={() => this.setState({ checkboxgroupModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckboxgroup}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.radioModal}\r\n                    title=\"Radio\"\r\n                    onCancel={() => this.setState({ radioModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddRadio}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.tableModal}\r\n                    title=\"Table\"\r\n                    onCancel={() => this.setState({ tableModal: false, tempValue: '', tempTable: [] })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handelAddTruthTable}>\r\n\r\n                        <Button onClick={() => this.setState({ headingModal: true })}>Add Heading?</Button>\r\n                        <Form.Item\r\n                            label=\"Value\"\r\n                        >\r\n                            <Input value={this.state.tempValue} onChange={(e) => { this.setState({ tempValue: e.target.value }) }} style={{ width: \"150px\" }} />\r\n                        </Form.Item>\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue } = this.state\r\n                                if (tempValue) {\r\n                                    if (tempTable.length) {\r\n                                        tempTable[tempTable.length - 1].values.push(tempValue)\r\n                                    }\r\n                                    else {\r\n                                        tempTable.push({\r\n                                            type: \"row\",\r\n                                            values: [tempValue]\r\n                                        })\r\n                                    }\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: ''\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the default value')\r\n                            }}>Add Box</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue } = this.state\r\n                                if (tempValue) {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [tempValue]\r\n                                    })\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: \"\"\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the defult value')\r\n                            }}>Add Box in next row</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable } = this.state\r\n                                if (tempTable.length) {\r\n                                    tempTable[tempTable.length - 1].values.push(\"_switch_\" + uuid())\r\n                                }\r\n                                else {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [\"_switch_\" + uuid()]\r\n                                    })\r\n                                }\r\n                                this.setState(\r\n                                    {\r\n                                        tempTable\r\n                                    }\r\n                                )\r\n                            }}>Add user switch</Button>\r\n                        </div>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Confirm</Button>\r\n                        </Form.Item>\r\n                        <h3>Table Preview</h3>\r\n                        <Form>{this.state.tempTable.map(row => (\r\n                            <div className=\"truth-table-row\">\r\n                                {row.values.map(value => {\r\n                                    if (value.startsWith('_switch_')) {\r\n                                        return (\r\n                                            <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                    else {\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                        ))}</Form>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.uploadModal}\r\n                    title=\"Upload\"\r\n                    onCancel={() => this.setState({ uploadModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddUpload}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormBuilder\r\n","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nexport const getSomeData = () => async dispatch => {\r\n    const res = await axios.get(\"/some-api-route\");\r\n    dispatch({\r\n        type: ACTION.GET_SOME_DATA,\r\n        payload: res.data\r\n    })\r\n}\r\n\r\nexport const setFormData = (content) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_FORM_DATA,\r\n        payload: content\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { Form, Input, Button, Upload, notification } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined, InboxOutlined } from '@ant-design/icons';\r\nimport axios from \"axios\"\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { setFormData } from './action';\r\nimport imageCompression from 'browser-image-compression';\r\nimport { baseUrl } from '../../config';\r\n\r\n//JUST UTILITY CODE ONLY!!! NOT PART OF PROJECT\r\n\r\nconst { Dragger } = Upload;\r\n\r\n\r\nclass BuildCircuitBuilder extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            ans: null,\r\n        }\r\n    }\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 4 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 20 },\r\n            },\r\n        };\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            if (e.fileList.length > 1) {\r\n                e.fileList.shift();\r\n            }\r\n            console.log(\"called\")\r\n            return e && e.fileList;\r\n        };\r\n        return (\r\n            <div style={{ width: \"800px\", margin: \"auto\", padding: \"20px 0\" }}>\r\n                <Form onFinish={(val) => {\r\n                    const { steps } = val;\r\n                    let success = 1;\r\n                    if (!steps)\r\n                        return\r\n                    let newSteps = steps.map(step => {\r\n                        const { upload_image, upload_side, description } = step;\r\n                        if (upload_side && upload_image[0].response && upload_image[0].response.location && upload_side[0].response && upload_side[0].response.location)\r\n                            return {\r\n                                description,\r\n                                upload_image: [{\r\n                                    name: upload_image[0].name,\r\n                                    // originalFileObj: upload_image[0].originalFileObj,\r\n                                    response: upload_image[0].response,\r\n                                    status: upload_image[0].status,\r\n                                    thumbUrl: upload_image[0].thumbUrl,\r\n                                    uid: upload_image[0].uid\r\n                                }],\r\n                                imagePath: upload_image[0].response.location,\r\n                                upload_side: [{\r\n                                    name: upload_side[0].name,\r\n                                    // originalFileObj: upload_side[0].originalFileObj,\r\n                                    response: upload_side[0].response,\r\n                                    status: upload_side[0].status,\r\n                                    thumbUrl: upload_side[0].thumbUrl,\r\n                                    uid: upload_side[0].uid\r\n                                }],\r\n                                sideImagePath: upload_image[0].response.location\r\n                            }\r\n                        else if (upload_image[0].response && upload_image[0].response.location) {\r\n                            return {\r\n                                description,\r\n                                upload_image: [{\r\n                                    name: upload_image[0].name,\r\n                                    // originalFileObj: upload_image[0].originalFileObj,\r\n                                    response: upload_image[0].response,\r\n                                    status: upload_image[0].status,\r\n                                    thumbUrl: upload_image[0].thumbUrl,\r\n                                    uid: upload_image[0].uid\r\n                                }],\r\n                                imagePath: upload_image[0].response.location,\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            success = 0;\r\n                        }\r\n                    }\r\n                    )\r\n                    if (success) {\r\n\r\n                        this.setState({ ans: { steps: newSteps } });\r\n                        console.log({ steps: newSteps })\r\n                        axios.post(`${baseUrl}/api/course/buildCircuit`, { course_id: \"5f1ef04ec0f8f301d4f0668f\", steps: newSteps })\r\n                            .then(res => console.log(\"hmm seems fine\"))\r\n                            .catch(err => console.log(\"error in adding\"))\r\n                    }\r\n                    else {\r\n                        this.openNotificationWithIcon('error', 'Please make sure all the images have been successfully uploaded')\r\n\r\n                    }\r\n\r\n                }}>\r\n                    <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                        {(fields, { add, remove }) => {\r\n                            return (\r\n                                <div>\r\n                                    {fields.map((field, index) => (\r\n                                        <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                            <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                <Form.Item\r\n                                                    label={`Step${index + 1}`}\r\n                                                    {...field}\r\n                                                    key={\"desc\" + index}\r\n                                                    name={[field.name, 'description']}\r\n                                                    fieldKey={[field.fieldKey, 'description']}\r\n                                                    rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                >\r\n                                                    <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                </Form.Item>\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    key={\"upload_image\" + index}\r\n                                                    {...formItemLayoutWithOutLabel}\r\n                                                    name={[field.name, 'upload_image']}\r\n                                                    valuePropName=\"fileList\"\r\n                                                    getValueFromEvent={normFile}\r\n                                                    fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                    rules={[{ required: true, message: 'Missing Image!' }]}\r\n                                                >\r\n                                                    <Upload multiple={false} accept=\".png\"\r\n                                                        name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                            const compressedFile = await imageCompression(file, options);\r\n                                                            console.log(\"before compeee\")\r\n                                                            console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                            console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                            console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                            console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                            let formData = new FormData()\r\n                                                            formData.set('expId', '123')\r\n                                                            formData.append('file', compressedFile)\r\n                                                            await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                onSuccess(res.data)\r\n                                                                console.log(res.data)\r\n                                                            }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                        }}\r\n                                                        listType=\"picture\"\r\n                                                    >\r\n                                                        <Button>\r\n                                                            <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                    </Upload>\r\n                                                </Form.Item>\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    key={\"upload_side\" + index}\r\n                                                    {...formItemLayoutWithOutLabel}\r\n                                                    name={[field.name, 'upload_side']}\r\n                                                    valuePropName=\"fileList\"\r\n                                                    getValueFromEvent={normFile}\r\n                                                    fieldKey={[field.fieldKey, 'upload_side']}\r\n                                                >\r\n                                                    <Upload multiple={false} accept=\".png\"\r\n                                                        name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                            const compressedFile = await imageCompression(file, options);\r\n                                                            console.log(\"before compeee\")\r\n                                                            console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                            console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                            console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                            console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                            let formData = new FormData()\r\n                                                            formData.set('expId', '123')\r\n                                                            formData.append('file', compressedFile)\r\n                                                            await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                onSuccess(res.data)\r\n                                                                console.log(res.data)\r\n                                                            }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                        }}\r\n                                                        listType=\"picture\"\r\n                                                    >\r\n                                                        <Button>\r\n                                                            <UploadOutlined /> Upload Side Image (if any)\r\n                                                        </Button>\r\n                                                    </Upload>\r\n                                                </Form.Item>\r\n                                            </div>\r\n\r\n\r\n                                            <MinusCircleOutlined\r\n                                                style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                onClick={() => {\r\n                                                    remove(field.name);\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n\r\n                                    ))}\r\n                                    <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                        <Button\r\n                                            type=\"dashed\"\r\n                                            onClick={() => {\r\n                                                add();\r\n                                            }}\r\n                                            style={{ width: '60%', alignSelf: \"center\" }}\r\n                                        >\r\n                                            <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                    </Form.List>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n\r\n\r\n                {\r\n                    this.state.ans ?\r\n                        <Form initialValues={this.state.ans} onFinish={(val) => {\r\n                            // this.setState({ ans: val });\r\n                            console.log(val)\r\n                        }}>\r\n                            <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                                {(fields, { add, remove }) => {\r\n                                    return (\r\n                                        <div>\r\n                                            {fields.map((field, index) => (\r\n                                                < div key={field.key} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                    <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                        <Form.Item\r\n                                                            label={`Step${index + 1}`}\r\n                                                            {...field}\r\n                                                            name={[field.name, 'description']}\r\n                                                            fieldKey={[field.fieldKey, 'description']}\r\n                                                            rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                        >\r\n                                                            <Input.TextArea style={{ width: \"90%\" }} />\r\n                                                        </Form.Item>\r\n                                                        <Form.Item\r\n                                                            {...field}\r\n                                                            {...formItemLayoutWithOutLabel}\r\n                                                            name={[field.name, 'upload_image']}\r\n                                                            valuePropName=\"fileList\"\r\n                                                            getValueFromEvent={normFile}\r\n                                                            fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                            rules={[{ required: true, message: 'Missing step image' }]}\r\n                                                        >\r\n                                                            <Upload multiple={false} accept=\".png\"\r\n                                                                name=\"file\" action={`${baseUrl}/api/uploadExperimentImages?expId=123`} listType=\"picture\">\r\n                                                                <Button>\r\n                                                                    <UploadOutlined /> Upload Image\r\n          </Button>\r\n                                                            </Upload>\r\n                                                        </Form.Item>\r\n                                                        <Form.Item\r\n                                                            {...field}\r\n                                                            {...formItemLayoutWithOutLabel}\r\n                                                            name={[field.name, 'upload_side']}\r\n                                                            valuePropName=\"fileList\"\r\n                                                            getValueFromEvent={normFile}\r\n                                                            fieldKey={[field.fieldKey, 'upload_side']}\r\n                                                        >\r\n                                                            <Upload multiple={false} accept=\".png\"\r\n                                                                name=\"file\" action={`${baseUrl}/api/uploadExperimentImages?expId=123`} listType=\"picture\">\r\n                                                                <Button>\r\n                                                                    <UploadOutlined /> Upload Side Image(if any)\r\n          </Button>\r\n                                                            </Upload>\r\n                                                        </Form.Item>\r\n                                                    </div>\r\n\r\n\r\n                                                    <MinusCircleOutlined\r\n                                                        style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n\r\n                                            ))}\r\n                                            <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                                <Button\r\n                                                    type=\"dashed\"\r\n                                                    onClick={() => {\r\n                                                        add();\r\n                                                    }}\r\n                                                    style={{ width: '60%', alignSelf: \"center\" }}\r\n                                                >\r\n                                                    <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    );\r\n                                }}\r\n                            </Form.List>\r\n\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                            </Form.Item>\r\n                        </Form> : null\r\n                }\r\n\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    // formData: state.buildCircuitBuilderReducer.formData\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setFormData: bindActionCreators(setFormData, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BuildCircuitBuilder);\r\n","export const ACTION = {\r\n    GET_MODULES: 'GET_MODULES',\r\n    GET_CURRENT_MODULE: 'GET_CURRENT_MODULE',\r\n    GET_COURSE_TROUBLESHOOT: 'GET_COURSE_TROUBLESHOOT',\r\n    UPDATE_COURSE: 'UPDATE_COURSE',\r\n    UPDATE_SUBMOD: 'UPDATE_SUBMOD',\r\n    DELETE_SUBMOD: 'DELETE_SUBMOD',\r\n    DELETE_MOD: 'DELETE_MOD',\r\n    CLEAR_CURRENT_MODULE: 'CLEAR_CURRENT_MODULE',\r\n    CLEAR_ADMIN_DASH: 'CLEAR_ADMIN_DASH'\r\n};\r\n","import { ACTION } from './constants';\r\nimport axios from 'axios';\r\nimport { baseUrl } from '../../config';\r\n\r\nexport const getSomeData = () => async (dispatch) => {\r\n    const res = await axios.get('/some-api-route');\r\n    console.log(res.data);\r\n    dispatch({\r\n        type: ACTION.GET_SOME_DATA,\r\n        payload: res.data.modules.courses,\r\n    });\r\n};\r\n\r\nexport const getModules = (type) => async (dispatch) => {\r\n    try {\r\n        console.log('before call');\r\n        const res = await axios.get(`${baseUrl}/api/module/all/${type}`);\r\n        console.log(res.data);\r\n        dispatch({\r\n            type: ACTION.GET_MODULES,\r\n            payload: res.data.modules || [],\r\n        });\r\n    } catch (err) {\r\n        console.log('error in getModules');\r\n    }\r\n};\r\n\r\nexport const getCurrentModule = (id) => async (dispatch) => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/module/get/${id}`);\r\n        console.log(res.data);\r\n        dispatch({\r\n            type: ACTION.GET_CURRENT_MODULE,\r\n            payload: res.data.module,\r\n        });\r\n    } catch (err) {\r\n        console.log('error in getCurrentModule');\r\n    }\r\n};\r\n\r\nexport const getCourseTroubleshoot = (name) => async (dispatch) => {\r\n    try {\r\n        const res = await axios.get(\r\n            `${baseUrl}/api/module/course-troubleshoot/${name}`\r\n        );\r\n        dispatch({\r\n            type: ACTION.GET_COURSE_TROUBLESHOOT,\r\n            payload: res.data.troubleshoot,\r\n        });\r\n    } catch (err) {\r\n        console.log('error in getCourseTroubleshoot');\r\n    }\r\n};\r\n\r\nexport const addCourseTroubleshoot = (name, faqs) => async (dispatch) => {\r\n    try {\r\n        const res = await axios.post(\r\n            `${baseUrl}/api/module/course-troubleshoot/${name}`,\r\n            {\r\n                faqs,\r\n            }\r\n        );\r\n        console.log('res.data', res.data);\r\n        dispatch({\r\n            type: ACTION.GET_COURSE_TROUBLESHOOT,\r\n            payload: res.data.troubleshoot,\r\n        });\r\n    } catch (err) {\r\n        console.log('error in addCourseTroubleshoot');\r\n    }\r\n};\r\n\r\nexport const updateModule = (name, introduction, id) => async (dispatch) => {\r\n    try {\r\n        const res = await axios.post(\r\n            `${baseUrl}/api/module/update-info/${id}`,\r\n            { name, introduction }\r\n        );\r\n        console.log(\"data post:\", res.data);\r\n        dispatch({\r\n            type: ACTION.UPDATE_COURSE,\r\n            payload: [name, introduction],\r\n        });\r\n    } catch (err) {\r\n        console.log('Error in updateModule:' + err);\r\n    }\r\n};\r\n\r\nexport const updateSubModule = (name, id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/update/${id}`, { name })\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.UPDATE_SUBMOD,\r\n            payload: name\r\n        })\r\n    } catch (err) {\r\n        // console.log(\"Failed method : updateModuleName\")\r\n        console.log(err);\r\n    }\r\n\r\n}\r\n\r\nexport const deleteSubModule = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/delete/${id}`)\r\n        dispatch({\r\n            type: ACTION.DELETE_SUBMOD,\r\n        })\r\n    } catch (err) {\r\n        // console.log(\"Failed method : updateModuleName\")\r\n        console.log(err);\r\n    }\r\n\r\n}\r\n\r\nexport const deleteModule = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/module/delete/${id}`)\r\n        dispatch({\r\n            type: ACTION.DELETE_MOD,\r\n        })\r\n    } catch (err) {\r\n        // console.log(\"Failed method : updateModuleName\")\r\n        console.log(err);\r\n    }\r\n\r\n}\r\n\r\nexport const clearCurrentModule = () => dispatch => {\r\n    dispatch({ type: ACTION.CLEAR_CURRENT_MODULE })\r\n}\r\n\r\nexport const clearAdminDash = () => dispatch => {\r\n    dispatch({ type: ACTION.CLEAR_ADMIN_DASH })\r\n}","import React, { useState } from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport axios from \"axios\"\r\nimport \"./styles.scss\"\r\nimport imageCompression from 'browser-image-compression';\r\nimport { baseUrl } from '../../config';\r\n\r\nconst TextEditor = ({ value = '', onChange }) => {\r\n\r\n    const [answer, setAnswer] = useState('')\r\n\r\n    const onEditorChange = (newAnswer) => {\r\n        setAnswer(newAnswer);\r\n        if (onChange) {\r\n            onChange(newAnswer);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"text-editor\">\r\n            <Editor\r\n                apiKey=\"n7942578kkai07fww91ixztab3vfa874swodd4i2e1ymki4i\"\r\n                value={value}\r\n                init={{\r\n                    height: \"50vh\",\r\n                    skin: \"oxide-dark\",\r\n                    // content_css: \"dark\",\r\n                    content_style: '.mce-content-body{background-color:#041D32; color:white}',\r\n                    menubar: false,\r\n                    image_dimensions: false,\r\n                    image_class_list: [\r\n                        { title: 'Responsive', value: 'img-responsive' }\r\n                    ],\r\n                    formats: {\r\n                        nomargin: { selector: 'figure', classes: 'no-margin' }\r\n                    },\r\n                    plugins: [\r\n                        'advlist autolink lists link image',\r\n                        'charmap print preview anchor help',\r\n                        'searchreplace visualblocks code',\r\n                        'insertdatetime media table paste wordcount emoticons',\r\n\r\n                    ],\r\n                    automatic_uploads: true,\r\n                    image_title: true,\r\n                    image_caption: true,\r\n                    file_picker_types: 'image',\r\n                    toolbar:\r\n                        'undo redo | formatselect | bold italic | \\\r\n            alignleft aligncenter alignright | \\\r\n            bullist numlist outdent indent  | image table  | fontselect fontsizeselect|link | forecolor backcolor  |  emoticons | preview',\r\n\r\n\r\n                    file_picker_callback: (callback, value, meta) => {\r\n                        console.log(\"called\")\r\n                        var input = document.createElement('input');\r\n                        input.setAttribute('type', 'file');\r\n                        input.setAttribute('accept', 'image/*');\r\n                        console.log(\"this\", this)\r\n                        input.onchange = async function () {\r\n                            var file = this.files[0];\r\n                            console.log(\"before compeee\")\r\n                            console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                            console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                            const options = {\r\n                                maxSizeMB: 1,\r\n                                maxWidthOrHeight: 920,\r\n                                useWebWorker: true\r\n                            }\r\n                            try {\r\n                                const compressedFile = await imageCompression(file, options);\r\n\r\n                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                let formData = new FormData();\r\n                                formData.set('expId', '12345')//maybe in future pass some props\r\n                                formData.append('file', compressedFile)\r\n\r\n                                await axios.post(`${baseUrl}/api/upload/introduction`, formData).then(\r\n                                    res => {\r\n                                        console.log(\"res.data\", res.data)\r\n                                        console.log(\"path\", process.env.PUBLIC_URL)\r\n                                        callback(res.data.location, {\r\n                                            alt: res.data.originalName\r\n                                        })\r\n                                    }\r\n                                ).catch(err => console.log(\"error in uploading image\"))\r\n                            }\r\n                            catch (err) {\r\n                                console.log(\"an erron man , probly while compressing\")\r\n                            }\r\n                        };\r\n                        input.click()\r\n                    },\r\n                    paste_data_images: true,\r\n                }}\r\n                onEditorChange={onEditorChange}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default TextEditor","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addCourseTroubleshoot, getCourseTroubleshoot, getModules, clearAdminDash, deleteModule } from './action'\r\nimport { bindActionCreators } from 'redux'\r\nimport { Link } from \"react-router-dom\"\r\nimport { MODULE, SUBMODULE, GETTINGSTARTED } from '../../config'\r\nimport './styles.scss'\r\nimport { Form, Input, Button, notification, Tabs, Col, Divider } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, } from '@ant-design/icons';\r\nimport TextEditor from '../TextEditor/text'\r\nconst { TabPane } = Tabs;\r\n\r\n\r\n\r\nclass Modules extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            selectedWindow: 'modules-tab',\r\n        };\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.props.getModules(this.props.match.params.type);\r\n        await this.props.getCourseTroubleshoot(this.props.match.params.type);\r\n        console.log('after fetch');\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearAdminDash();\r\n    }\r\n    onModDel = async (event) => {\r\n        await this.props.deleteModule(event);\r\n        this.props.history.go(0);\r\n    };\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n    changeCurrentWindow = (selectedOptionWord) => {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedWindow: selectedOptionWord,\r\n        });\r\n    };\r\n    render() {\r\n        const { modules } = this.props;\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        return (\r\n            <div className=\"card-container\">\r\n                <Tabs type=\"card\" centered>\r\n                    <TabPane tab=\"Modules\" key=\"1\">\r\n                        <Col justify=\"space-around\" align=\"middle\">\r\n                            <Divider>All {this.props.match.params.type} {MODULE}s</Divider>\r\n                            {modules.map(module => (\r\n                                <>\r\n                                    {module.name !== GETTINGSTARTED + \"ignore\" &&\r\n                                        <div style={{display:\"flex\", maxWidth:\"800px\", justifyContent:\"space-between\"}}>\r\n                                        <Link style={{display:'inline'}} to={`/admin/${this.props.match.params.type}/module/${module._id}`}>\r\n                                        {module.name}\r\n                                        </Link>\r\n                                        <Link style={{display:'inline', color:\"red\"}} onClick={()=>{this.onModDel(module._id)}}>\r\n                                        {\"Delete\"}\r\n                                        </Link>\r\n                                        </div>\r\n                                    }\r\n                                </>\r\n                            ))}\r\n                            <br />\r\n                            <Link to={`/admin/${this.props.match.params.type}/add-module`}><Button style={{ margin: \"10px\" }}>Add {MODULE}</Button></Link>\r\n                            <br />\r\n                            {!modules.some(el => el.name === GETTINGSTARTED) &&\r\n                                <Link to={`/admin/${this.props.match.params.type}/add-starter`}><Button style={{ margin: \"10px\" }}>Add Getting Started {MODULE}</Button></Link>\r\n                            }\r\n                            {modules.some(el => el.name === GETTINGSTARTED) &&\r\n                                <Link to={`/admin/${this.props.match.params.type}/add-course/${modules.find(el => el.name === GETTINGSTARTED)._id}`}><Button style={{ margin: \"10px\" }}>Add Getting Started {SUBMODULE}</Button></Link>\r\n                            }\r\n                        </Col>\r\n                    </TabPane>\r\n                    <TabPane tab=\"Course Troubleshoot\" key=\"2\">\r\n                        <Col justify=\"space-around\" align=\"middle\">\r\n                            <Divider>COURSE-LEVEL-TROUBLESHOOT</Divider>\r\n\r\n                            <div style={{ width: \"800px\", margin: \"auto\", padding: \"20px 0\" }}>\r\n                                ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.troubleshoot} onFinish={async (val) => {\r\n                                    console.log(\"valllll\", val)\r\n                                    const { faqs } = val;\r\n                                    if (faqs.length) {\r\n\r\n                                        this.setState({ loading: true })\r\n                                        await this.props.addCourseTroubleshoot(this.props.match.params.type, faqs)\r\n                                        this.setState({ loading: false })\r\n                                    } else {\r\n                                        this.openNotificationWithIcon('error', 'Please make sure at least one FAQ is there')\r\n                                    }\r\n\r\n                                }}>\r\n\r\n                                    <Form.List name=\"faqs\" label=\"faqs\" rules={[{ required: true }]}>\r\n                                        {(fields, { add, remove }) => {\r\n                                            return (\r\n                                                <div>\r\n                                                    {fields.map((field, index) => (\r\n                                                        <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                            <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                                <Form.Item\r\n                                                                    label={`Question${index + 1}`}\r\n                                                                    {...field}\r\n                                                                    key={\"desc\" + index}\r\n                                                                    name={[field.name, 'question']}\r\n                                                                    fieldKey={[field.fieldKey, 'question']}\r\n                                                                // rules={[{ required: true, message: 'Missing Step Question' }]}\r\n                                                                >\r\n                                                                    <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                                </Form.Item>\r\n                                                                <Form.Item\r\n                                                                    label={`Answer${index + 1}`}\r\n                                                                    {...field}\r\n                                                                    key={\"desc\" + index}\r\n                                                                    name={[field.name, 'answer']}\r\n                                                                    fieldKey={[field.fieldKey, 'answer']}\r\n                                                                    rules={[{ required: true, message: 'Missing Step Answer' }]}\r\n                                                                >\r\n                                                                    <TextEditor />\r\n\r\n                                                                </Form.Item>\r\n                                                            </div>\r\n\r\n                                                            <MinusCircleOutlined\r\n                                                                style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                                onClick={() => {\r\n                                                                    remove(field.name);\r\n                                                                }}\r\n                                                            />\r\n                                                        </div>\r\n                                                    ))}\r\n                                                    <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                                        <Button\r\n                                                            type=\"dashed\"\r\n                                                            onClick={() => {\r\n                                                                add();\r\n                                                            }}\r\n                                                            style={{ width: '60%', alignSelf: \"center\" }}\r\n                                                        >\r\n                                                            <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                    </Form.List>\r\n\r\n                                    <Form.Item>\r\n                                        <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                                    </Form.Item>\r\n\r\n                                </Form>\r\n                            </div>\r\n\r\n                        </Col>\r\n                    </TabPane>\r\n                </Tabs>\r\n            </div>\r\n        )\r\n\r\n        //     <div>\r\n        //         <div>\r\n        //             All {this.props.match.params.type} {MODULE}s\r\n        //         </div>\r\n        //         <div className=\"allmodules-container\">\r\n        //             <div className=\"allmodules-navbar\">\r\n        //                 <div className=\"allmodules-name\">\r\n        //                     {this.props.match.params.type.toUpperCase()}\r\n        //                 </div>\r\n        //                 <div className=\"navbar-horizontal\">\r\n        //                     <button\r\n        //                         className=\"modules-tab\"\r\n        //                         onClick={() =>\r\n        //                             this.changeCurrentWindow('modules-tab')\r\n        //                         }\r\n        //                     >\r\n        //                         {MODULE.toUpperCase()}S\r\n        //                     </button>\r\n        //                     <button\r\n        //                         className=\"faqs-tab\"\r\n        //                         onClick={() =>\r\n        //                             this.changeCurrentWindow('faqs-tab')\r\n        //                         }\r\n        //                     >\r\n        //                         FAQS\r\n        //                     </button>\r\n        //                 </div>\r\n        //             </div>\r\n\r\n        //             {this.state.selectedWindow === 'faqs-tab' ? (\r\n        //                 <div\r\n        //                     style={{\r\n        //                         width: '800px',\r\n        //                         margin: 'auto',\r\n        //                         padding: '20px 0',\r\n        //                     }}\r\n        //                 >\r\n        //                     <p>\r\n        //                         <u>COURSE-LEVEL-TROUBLESHOOT</u>\r\n        //                     </p>\r\n        //                     ***Don't Reload before Saving! Changes may get lost\r\n        //                     ***\r\n        //                     {\r\n        //                         this.props.troubleshoot ?\r\n        //                             (\r\n        //                                 <Form\r\n        //                                     initialValues={this.props.troubleshoot}\r\n        //                                     onFinish={async (val) => {\r\n        //                                         console.log('valllll', val);\r\n        //                                         const { faqs } = val;\r\n        //                                         if (faqs.length) {\r\n        //                                             this.setState({ loading: true });\r\n        //                                             await this.props.addCourseTroubleshoot(\r\n        //                                                 this.props.match.params.type,\r\n        //                                                 faqs\r\n        //                                             );\r\n        //                                             this.setState({ loading: false });\r\n        //                                         } else {\r\n        //                                             this.openNotificationWithIcon(\r\n        //                                                 'error',\r\n        //                                                 'Please make sure at least one FAQ is there'\r\n        //                                             );\r\n        //                                         }\r\n        //                                     }}\r\n        //                                 >\r\n        //                                     <Form.List\r\n        //                                         name=\"faqs\"\r\n        //                                         label=\"faqs\"\r\n        //                                         rules={[{ required: true }]}\r\n        //                                     >\r\n        //                                         {(fields, { add, remove }) => {\r\n        //                                             return (\r\n        //                                                 <div>\r\n        //                                                     {fields.map((field, index) => (\r\n        //                                                         <div\r\n        //                                                             key={'unique' + index}\r\n        //                                                             style={{\r\n        //                                                                 display: 'flex',\r\n        //                                                                 alignItems:\r\n        //                                                                     'center',\r\n        //                                                             }}\r\n        //                                                         >\r\n        //                                                             <div\r\n        //                                                                 style={{\r\n        //                                                                     display: 'flex',\r\n        //                                                                     flexDirection:\r\n        //                                                                         'column',\r\n        //                                                                     width: '100%',\r\n        //                                                                 }}\r\n        //                                                             >\r\n        //                                                                 <Form.Item\r\n        //                                                                     label={`Question${index + 1\r\n        //                                                                         }`}\r\n        //                                                                     {...field}\r\n        //                                                                     key={\r\n        //                                                                         'desc' +\r\n        //                                                                         index\r\n        //                                                                     }\r\n        //                                                                     name={[\r\n        //                                                                         field.name,\r\n        //                                                                         'question',\r\n        //                                                                     ]}\r\n        //                                                                     fieldKey={[\r\n        //                                                                         field.fieldKey,\r\n        //                                                                         'question',\r\n        //                                                                     ]}\r\n        //                                                                     rules={[\r\n        //                                                                         {\r\n        //                                                                             required: true,\r\n        //                                                                             message:\r\n        //                                                                                 'Missing Step Question',\r\n        //                                                                         },\r\n        //                                                                     ]}\r\n        //                                                                 >\r\n        //                                                                     <Input.TextArea\r\n        //                                                                         style={{\r\n        //                                                                             width:\r\n        //                                                                                 '90%',\r\n        //                                                                         }}\r\n        //                                                                         autoSize={{\r\n        //                                                                             minRows: 2,\r\n        //                                                                         }}\r\n        //                                                                     />\r\n        //                                                                 </Form.Item>\r\n        //                                                                 <Form.Item\r\n        //                                                                     label={`Answer${index + 1\r\n        //                                                                         }`}\r\n        //                                                                     {...field}\r\n        //                                                                     key={\r\n        //                                                                         'desc' +\r\n        //                                                                         index\r\n        //                                                                     }\r\n        //                                                                     name={[\r\n        //                                                                         field.name,\r\n        //                                                                         'answer',\r\n        //                                                                     ]}\r\n        //                                                                     fieldKey={[\r\n        //                                                                         field.fieldKey,\r\n        //                                                                         'answer',\r\n        //                                                                     ]}\r\n        //                                                                 // rules={[{ required: true, message: 'Missing Step Answer' }]}\r\n        //                                                                 >\r\n        //                                                                     <TextEditor />\r\n        //                                                                 </Form.Item>\r\n        //                                                             </div>\r\n\r\n        //                                                             <MinusCircleOutlined\r\n        //                                                                 style={{\r\n        //                                                                     color: 'red',\r\n        //                                                                     fontSize:\r\n        //                                                                         '20px',\r\n        //                                                                 }}\r\n        //                                                                 onClick={() => {\r\n        //                                                                     remove(\r\n        //                                                                         field.name\r\n        //                                                                     );\r\n        //                                                                 }}\r\n        //                                                             />\r\n        //                                                         </div>\r\n        //                                                     ))}\r\n        //                                                     <Form.Item\r\n        //                                                         {...formItemLayoutWithOutLabel}\r\n        //                                                     >\r\n        //                                                         <Button\r\n        //                                                             type=\"dashed\"\r\n        //                                                             onClick={() => {\r\n        //                                                                 add();\r\n        //                                                             }}\r\n        //                                                             style={{\r\n        //                                                                 width: '60%',\r\n        //                                                                 alignSelf: 'center',\r\n        //                                                             }}\r\n        //                                                         >\r\n        //                                                             <PlusOutlined /> Add\r\n        //                                                         Question\r\n        //                                                     </Button>\r\n        //                                                     </Form.Item>\r\n        //                                                 </div>\r\n        //                                             );\r\n        //                                         }}\r\n        //                                     </Form.List>\r\n\r\n        //                                     <Form.Item>\r\n        //                                         <Button\r\n        //                                             loading={this.state.loading}\r\n        //                                             type=\"primary\"\r\n        //                                             htmlType=\"submit\"\r\n        //                                         >\r\n        //                                             Save/Update\r\n        //                                     </Button>\r\n        //                                     </Form.Item>\r\n        //                                     <p>\r\n        //                                         ***Update only if any changes are made,\r\n        //                                         otherwise it may take time***\r\n        //                                 </p>\r\n        //                                 </Form>\r\n        //                             )\r\n        //                             : null\r\n        //                     }\r\n\r\n        //                 </div>\r\n        //             ) : (\r\n        //                     <div\r\n        //                         style={{\r\n        //                             width: '800px',\r\n        //                             margin: 'auto',\r\n        //                             padding: '20px 0',\r\n        //                             fontSize: '150%',\r\n        //                         }}\r\n        //                     >\r\n        //                         {modules.map((module) => (\r\n        //                             <>\r\n        //                                 {module.name !==\r\n        //                                     GETTINGSTARTED + 'ignore' && (\r\n        //                                         <Link\r\n        //                                             to={`/admin/${this.props.match.params.type}/module/${module._id}`}\r\n        //                                         >\r\n        //                                             <div>⁜ {module.name}</div>\r\n        //                                         </Link>\r\n        //                                     )}\r\n        //                             </>\r\n        //                         ))}\r\n        //                         <br />\r\n        //                         <Link\r\n        //                             to={`/admin/${this.props.match.params.type}/add-module`}\r\n        //                         >\r\n        //                             <Button>Add {MODULE}</Button>\r\n        //                         </Link>\r\n        //                     </div>\r\n        //                 )}\r\n        //         </div>\r\n\r\n\r\n        //         <br />\r\n        //         {!modules.some((el) => el.name === GETTINGSTARTED) && (\r\n        //             <Link to={`/admin/${this.props.match.params.type}/add-starter`}>\r\n        //                 <Button>Add Starter {MODULE}</Button>\r\n        //             </Link>\r\n        //         )}\r\n        //         {modules.some((el) => el.name === GETTINGSTARTED) && (\r\n        //             <Link\r\n        //                 to={`/admin/${this.props.match.params.type}/add-course/${modules.find((el) => el.name === GETTINGSTARTED)._id\r\n        //                     }`}\r\n        //             >\r\n        //                 <Button>Add Starter {SUBMODULE}</Button>\r\n        //             </Link>\r\n        //         )}\r\n        //     </div>\r\n        // );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    modules: state.modulesReducer.modules,\r\n    troubleshoot: state.modulesReducer.courseTroubleshoot,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getModules: bindActionCreators(getModules, dispatch),\r\n    getCourseTroubleshoot: bindActionCreators(getCourseTroubleshoot, dispatch),\r\n    addCourseTroubleshoot: bindActionCreators(addCourseTroubleshoot, dispatch),\r\n    deleteModule: bindActionCreators(deleteModule, dispatch),\r\n    clearAdminDash: bindActionCreators(clearAdminDash, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Modules);\r\n","import React from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport axios from \"axios\"\r\nimport \"./styles.scss\"\r\nimport imageCompression from 'browser-image-compression';\r\nimport { baseUrl } from '../../config';\r\n\r\nconst TextEditor = ({ handleEditorChange, content }) => {\r\n\r\n    return (\r\n        <div className=\"text-editor\">\r\n            <Editor\r\n                apiKey=\"n7942578kkai07fww91ixztab3vfa874swodd4i2e1ymki4i\"\r\n                value={content}\r\n                init={{\r\n                    height: \"90vh\",\r\n                    skin: \"oxide-dark\",\r\n                    // content_css: \"dark\",\r\n                    content_style: '.mce-content-body{background-color:#041D32; color:white}',\r\n                    menubar: false,\r\n                    image_dimensions: false,\r\n                    image_class_list: [\r\n                        { title: 'Responsive', value: 'img-responsive' }\r\n                    ],\r\n                    formats: {\r\n                        nomargin: { selector: 'figure', classes: 'no-margin' }\r\n                    },\r\n                    plugins: [\r\n                        'advlist autolink lists link image',\r\n                        'charmap print preview anchor help',\r\n                        'searchreplace visualblocks code',\r\n                        'insertdatetime media table paste wordcount emoticons',\r\n\r\n                    ],\r\n                    automatic_uploads: true,\r\n                    image_title: true,\r\n                    image_caption: true,\r\n                    file_picker_types: 'image',\r\n                    toolbar:\r\n                        'undo redo | formatselect | bold italic | \\\r\n            alignleft aligncenter alignright | \\\r\n            bullist numlist outdent indent  | image table  | fontselect fontsizeselect|link | forecolor backcolor  |  emoticons | preview',\r\n\r\n\r\n                    file_picker_callback: (callback, value, meta) => {\r\n                        console.log(\"called\")\r\n                        var input = document.createElement('input');\r\n                        input.setAttribute('type', 'file');\r\n                        input.setAttribute('accept', 'image/*');\r\n                        console.log(\"this\", this)\r\n                        input.onchange = async function () {\r\n                            var file = this.files[0];\r\n                            console.log(\"before compeee\")\r\n                            console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                            console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                            const options = {\r\n                                maxSizeMB: 1,\r\n                                maxWidthOrHeight: 920,\r\n                                useWebWorker: true\r\n                            }\r\n                            try {\r\n                                const compressedFile = await imageCompression(file, options);\r\n\r\n                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                let formData = new FormData();\r\n                                formData.set('expId', '12345')//maybe in future pass some props\r\n                                formData.append('file', compressedFile)\r\n\r\n                                await axios.post(`${baseUrl}/api/upload/introduction`, formData).then(\r\n                                    res => {\r\n                                        console.log(\"res.data\", res.data)\r\n                                        console.log(\"path\", process.env.PUBLIC_URL)\r\n                                        callback(res.data.location, {\r\n                                            alt: res.data.originalName\r\n                                        })\r\n                                    }\r\n                                ).catch(err => console.log(\"error in uploading image\"))\r\n                            }\r\n                            catch (err) {\r\n                                console.log(\"an erron man , probly while compressing\")\r\n                            }\r\n                        };\r\n                        input.click()\r\n                    },\r\n                    paste_data_images: true,\r\n                }}\r\n                onEditorChange={handleEditorChange}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default TextEditor","export const ACTION = {\r\n    ADD_MODULE_SUCCESS: 'ADD_MODULE_SUCCESS',\r\n    SET_MODULE_NAME: \"SET_MODULE_NAME\",\r\n    SET_MODULE_INTRODUCTION: \"SET_MODULE_INTRODUCTION\",\r\n    CLEAR_ADD_MODULE: \"CLEAR_ADD_MODULE\"\r\n};","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nimport { baseUrl } from '../../../config';\r\nexport const getSomeData = () => async dispatch => {\r\n    const res = await axios.get(\"/some-api-route\");\r\n    console.log(res.data)\r\n    dispatch({\r\n        type: ACTION.GET_SOME_DATA,\r\n        payload: res.data\r\n    })\r\n}\r\n\r\nexport const addModule = (name, introduction, type) => async dispatch => {\r\n    try {\r\n        console.log(\"before call\")\r\n        const res = await axios.post(`${baseUrl}/api/module/add`, { name, introduction, type })\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_MODULE_SUCCESS,\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addModules\")\r\n    }\r\n\r\n}\r\n\r\nexport const setModuleName = (name) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_MODULE_NAME,\r\n        payload: name\r\n    })\r\n}\r\n\r\nexport const setModuleIntroduction = (introduction) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_MODULE_INTRODUCTION,\r\n        payload: introduction\r\n    })\r\n}\r\n\r\nexport const clearAddModule = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_ADD_MODULE\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getModules } from '../action'\r\nimport { bindActionCreators } from 'redux'\r\nimport { Link } from \"react-router-dom\"\r\nimport { Button, Form, Input, notification } from 'antd'\r\nimport TextEditor from '../../TextEditor'\r\nimport \"./styles.scss\"\r\nimport { setModuleIntroduction, addModule, setModuleName, clearAddModule } from './action'\r\nclass AddModule extends Component {\r\n\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        const { name, introduction, addModule, clearAddModule } = this.props;\r\n        if (name && introduction) {\r\n            this.setState({ loading: true })\r\n            await addModule(name, introduction, this.props.match.params.type);\r\n            this.setState({ loading: false })\r\n            clearAddModule()\r\n            this.props.history.goBack()\r\n        } else {\r\n            this.openNotificationWithIcon('warning', 'Please fill all the fields')\r\n        }\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { name, introduction, setModuleName, setModuleIntroduction } = this.props;\r\n        return (\r\n            <div className=\"add-module\" >\r\n                <h2>Add Module</h2>\r\n                <Form.Item label=\"Name\" rules={[{ required: true }]} >\r\n                    <Input value={name} onChange={(e) => setModuleName(e.target.value)} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Description\">\r\n                    <TextEditor content={introduction} handleEditorChange={setModuleIntroduction} />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button loading={this.state.loading} onClick={this.handleSubmit} type=\"primary\" htmlType=\"submit\">ADD MODULE</Button>\r\n                </Form.Item>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    name: state.addModuleReducer.name,\r\n    introduction: state.addModuleReducer.introduction\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setModuleName: bindActionCreators(setModuleName, dispatch),\r\n    setModuleIntroduction: bindActionCreators(setModuleIntroduction, dispatch),\r\n    addModule: bindActionCreators(addModule, dispatch),\r\n    clearAddModule: bindActionCreators(clearAddModule, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddModule)\r\n","export const ACTION = {\r\n    ADD_MODULE_SUCCESS: 'ADD_MODULE_SUCCESS',\r\n    SET_MODULE_NAME: \"SET_MODULE_NAME\",\r\n    SET_MODULE_INTRODUCTION: \"SET_MODULE_INTRODUCTION\",\r\n    CLEAR_ADD_MODULE: \"CLEAR_ADD_MODULE\"\r\n};","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nimport { baseUrl } from '../../../config';\r\nexport const getSomeData = () => async dispatch => {\r\n    const res = await axios.get(\"/some-api-route\");\r\n    console.log(res.data)\r\n    dispatch({\r\n        type: ACTION.GET_SOME_DATA,\r\n        payload: res.data\r\n    })\r\n}\r\n\r\nexport const addModule = (name, introduction, type) => async dispatch => {\r\n    try {\r\n        console.log(\"before call\")\r\n        const res = await axios.post(`${baseUrl}/api/module/add`, { name, introduction, type })\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_MODULE_SUCCESS,\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addModules\")\r\n    }\r\n\r\n}\r\n\r\nexport const setModuleName = (name) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_MODULE_NAME,\r\n        payload: name\r\n    })\r\n}\r\n\r\nexport const setModuleIntroduction = (introduction) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_MODULE_INTRODUCTION,\r\n        payload: introduction\r\n    })\r\n}\r\n\r\nexport const clearAddModule = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_ADD_MODULE\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { Button, Form, Input, notification } from 'antd'\r\nimport TextEditor from '../../TextEditor'\r\nimport \"./styles.scss\"\r\nimport { setModuleIntroduction, addModule, setModuleName, clearAddModule } from './action'\r\nimport { GETTINGSTARTED } from '../../../config'\r\nclass AddModuleConf extends Component {\r\n\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        const { introduction, addModule, clearAddModule } = this.props;\r\n        const name = GETTINGSTARTED;\r\n        if (name && introduction) {\r\n            this.setState({ loading: true })\r\n            await addModule(name, introduction, this.props.match.params.type);\r\n            this.setState({ loading: false })\r\n            clearAddModule()\r\n            this.props.history.goBack()\r\n        } else {\r\n            this.openNotificationWithIcon('warning', 'Please fill all the fields')\r\n        }\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { name, introduction, setModuleName, setModuleIntroduction } = this.props;\r\n        return (\r\n            <div className=\"add-module\" style={{ \"display\": \"flex\", \"flexDirection\": \"column\", justifyContent: \"center\" }}>\r\n                <Form\r\n                initialValues={{\r\n                    [\"name\"]: GETTINGSTARTED\r\n                }}\r\n                >\r\n                <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true }]} >\r\n                    <Input readOnly={true}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"Description\">\r\n                    <TextEditor content={introduction} handleEditorChange={setModuleIntroduction} />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button loading={this.state.loading} onClick={this.handleSubmit} type=\"primary\" htmlType=\"submit\">ADD MODULE</Button>\r\n                </Form.Item>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    name: state.addModuleReducer.name,\r\n    introduction: state.addModuleReducer.introduction\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setModuleName: bindActionCreators(setModuleName, dispatch),\r\n    setModuleIntroduction: bindActionCreators(setModuleIntroduction, dispatch),\r\n    addModule: bindActionCreators(addModule, dispatch),\r\n    clearAddModule: bindActionCreators(clearAddModule, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddModuleConf)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getCurrentModule, updateModule, updateSubModule, deleteSubModule, clearCurrentModule } from '../action';\r\nimport { Link } from 'react-router-dom';\r\nimport { Form, Input, Button, Divider, Row } from 'antd';\r\nimport { baseUrl, SUBMODULE } from '../../../config';\r\nimport './styles.scss';\r\nimport imageCompression from 'browser-image-compression';\r\nimport axios from 'axios';\r\n\r\nimport { Editor } from '@tinymce/tinymce-react';\r\n\r\nclass Module extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedWindow: 'submodule-name',\r\n            name: '',\r\n            introduction: '',\r\n        };\r\n        this.handleEditorChange = this.handleEditorChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.match.params.id);\r\n        this.props.getCurrentModule(this.props.match.params.id);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearCurrentModule()\r\n    }\r\n\r\n    changeCurrentWindow = (selectedOptionWord) => {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedWindow: selectedOptionWord,\r\n        });\r\n    };\r\n    handleEditorChange(e) {\r\n        // console.log('Content was updated:', e.target.getContent());\r\n        this.setState({ introduction: e.target.getContent() });\r\n    }\r\n    onFinish = async (event) => {\r\n        // event.preventDefault();\r\n        // console.log('You are submitting ' + JSON.stringify(this.props.module));\r\n        await this.props.updateModule(\r\n            event.name,\r\n            this.state.introduction,\r\n            this.props.match.params.id\r\n        );\r\n        this.props.history.goBack();\r\n    };\r\n    onSubFinish = async (values) => {\r\n        await this.props.updateSubModule(values.name, values.id);\r\n        // this.props.history.goBack()\r\n    };\r\n    onSubDel = async (event) => {\r\n        await this.props.deleteSubModule(event);\r\n        this.props.history.go(0);\r\n    };\r\n    render() {\r\n        const { module } = this.props;\r\n        if (module)\r\n            return (\r\n                <div className=\"module-container\">\r\n                    <div className=\"module-navbar\">\r\n                        <div className=\"module-name\">\r\n                            {module.name ? module.name.toUpperCase() : ''}\r\n                        </div>\r\n                        <div className=\"navbar-horizontal\">\r\n\r\n\r\n                            <button\r\n                                className={this.state.selectedWindow === 'submodule-name' ? \"submodule-name focus\" : \"submodule-name\"}\r\n                                onClick={() =>\r\n                                    this.changeCurrentWindow('submodule-name')\r\n                                }\r\n                            >\r\n                                {SUBMODULE.toUpperCase()}S\r\n                            </button>\r\n                            <button\r\n                                className={this.state.selectedWindow === 'module-details' ? \"module-details focus\" : \"module-details\"}\r\n                                onClick={() =>\r\n                                    this.changeCurrentWindow('module-details')\r\n                                }\r\n                            >\r\n                                MODULE DETAILS\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* SHOW MODULE DETAILS / SUBMODULES*/}\r\n                    {this.state.selectedWindow === 'module-details' ? (\r\n                        <Form\r\n                            className=\"module-form\"\r\n                            key={'uniq' + module.introduction}\r\n                            name=\"update-form\"\r\n                            onFinish={this.onFinish}\r\n                            labelCol={{ span: 8 }}\r\n                            wrapperCol={{ span: 16 }}\r\n                            initialValues={{ name: module.name }}\r\n                        >\r\n                            <Form.Item label=\"Name\">\r\n                                <Form.Item\r\n                                    name=\"name\"\r\n                                    noStyle\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'This field is required',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input\r\n                                        name=\"name\"\r\n                                        style={{ width: 160 }}\r\n                                        placeholder={module.name}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Form.Item>\r\n                            <Form.Item label=\"Description\">\r\n                                <Form.Item\r\n                                    name=\"introduction\"\r\n                                    noStyle\r\n                                // rules={[\r\n                                //     {\r\n                                //         required: true,\r\n                                //         message: 'This field is required',\r\n                                //     },\r\n                                // ]}\r\n                                >\r\n                                    {/* <Input\r\n                                        name=\"introduction\"\r\n                                        style={{ width: 260, height: '7vw' }}\r\n                                        placeholder={module.introduction}\r\n                                    /> */}\r\n                                    <Editor\r\n                                        textareaName=\"introduction\"\r\n                                        apiKey=\"n7942578kkai07fww91ixztab3vfa874swodd4i2e1ymki4i\"\r\n                                        init={{\r\n                                            height: '90vh',\r\n                                            skin: 'oxide-dark',\r\n                                            content_style:\r\n                                                '.mce-content-body{background-color:#041D32; color:white}',\r\n                                            menubar: false,\r\n                                            image_dimensions: false,\r\n                                            image_class_list: [\r\n                                                {\r\n                                                    title: 'Responsive',\r\n                                                    value: 'img-responsive',\r\n                                                },\r\n                                            ],\r\n                                            formats: {\r\n                                                nomargin: {\r\n                                                    selector: 'figure',\r\n                                                    classes: 'no-margin',\r\n                                                },\r\n                                            },\r\n                                            plugins: [\r\n                                                'advlist autolink lists link image',\r\n                                                'charmap print preview anchor help',\r\n                                                'searchreplace visualblocks code',\r\n                                                'insertdatetime media table paste wordcount emoticons',\r\n                                            ],\r\n                                            automatic_uploads: true,\r\n                                            image_title: true,\r\n                                            image_caption: true,\r\n                                            file_picker_types: 'image',\r\n                                            toolbar:\r\n                                                'undo redo | formatselect | bold italic | \\\r\n                                alignleft aligncenter alignright | \\\r\n                                bullist numlist outdent indent  | image table  | fontselect fontsizeselect|link | forecolor backcolor  |  emoticons | preview',\r\n\r\n                                            file_picker_callback: (\r\n                                                callback,\r\n                                                value,\r\n                                                meta\r\n                                            ) => {\r\n                                                console.log('called');\r\n                                                var input = document.createElement(\r\n                                                    'input'\r\n                                                );\r\n                                                input.setAttribute(\r\n                                                    'type',\r\n                                                    'file'\r\n                                                );\r\n                                                input.setAttribute(\r\n                                                    'accept',\r\n                                                    'image/*'\r\n                                                );\r\n                                                console.log('this', this);\r\n                                                input.onchange = async function () {\r\n                                                    var file = this.files[0];\r\n                                                    console.log(\r\n                                                        'before compeee'\r\n                                                    );\r\n                                                    console.log(\r\n                                                        'originalFile instanceof Blob',\r\n                                                        file instanceof Blob\r\n                                                    ); // true\r\n                                                    console.log(\r\n                                                        `originalFile size ${file.size /\r\n                                                        1024 /\r\n                                                        1024\r\n                                                        } MB`\r\n                                                    );\r\n                                                    const options = {\r\n                                                        maxSizeMB: 1,\r\n                                                        maxWidthOrHeight: 920,\r\n                                                        useWebWorker: true,\r\n                                                    };\r\n                                                    try {\r\n                                                        const compressedFile = await imageCompression(\r\n                                                            file,\r\n                                                            options\r\n                                                        );\r\n\r\n                                                        console.log(\r\n                                                            'compressedFile instanceof Blob',\r\n                                                            compressedFile instanceof\r\n                                                            Blob\r\n                                                        ); // true\r\n                                                        console.log(\r\n                                                            `compressedFile size ${compressedFile.size /\r\n                                                            1024 /\r\n                                                            1024\r\n                                                            } MB`\r\n                                                        );\r\n                                                        let formData = new FormData();\r\n                                                        formData.set(\r\n                                                            'expId',\r\n                                                            '12345'\r\n                                                        );\r\n                                                        formData.append(\r\n                                                            'file',\r\n                                                            compressedFile\r\n                                                        );\r\n\r\n                                                        await axios\r\n                                                            .post(\r\n                                                                `${baseUrl}/api/upload/introduction`,\r\n                                                                formData\r\n                                                            )\r\n                                                            .then((res) => {\r\n                                                                console.log(\r\n                                                                    'res.data',\r\n                                                                    res.data\r\n                                                                );\r\n                                                                console.log(\r\n                                                                    'path',\r\n                                                                    process.env\r\n                                                                        .PUBLIC_URL\r\n                                                                );\r\n                                                                callback(\r\n                                                                    res.data\r\n                                                                        .location,\r\n                                                                    {\r\n                                                                        alt:\r\n                                                                            res\r\n                                                                                .data\r\n                                                                                .originalName,\r\n                                                                    }\r\n                                                                );\r\n                                                            })\r\n                                                            .catch((err) =>\r\n                                                                console.log(\r\n                                                                    'error in uploading image'\r\n                                                                )\r\n                                                            );\r\n                                                    } catch (err) {\r\n                                                        console.log(\r\n                                                            'an erron man , probly while compressing'\r\n                                                        );\r\n                                                    }\r\n\r\n                                                    // console.log('images', file)\r\n                                                    // var reader = new FileReader();\r\n                                                    // reader.onload = function (e) {\r\n                                                    //   var id = 'blobid' + (new Date()).getTime();\r\n                                                    //   console.log('name', e.target.result)\r\n                                                    //   callback('logo192.png', {\r\n                                                    //     alt: file.name\r\n                                                    //   })\r\n                                                    // }\r\n                                                    // reader.readAsDataURL(file)\r\n                                                };\r\n                                                input.click();\r\n                                            },\r\n                                            paste_data_images: true,\r\n                                        }}\r\n                                        initialValue={module.introduction}\r\n                                        onChange={this.handleEditorChange}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    style={{ marginLeft: '50%' }}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    ) : (\r\n                            <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\", paddingBottom: \"20px\" }}>\r\n                                <ol className=\"submodule-list\">\r\n                                    {module.courses &&\r\n                                        module.courses.map((course) => (\r\n                                            <>\r\n                                                <Divider />\r\n                                                <Form\r\n                                                    name=\"update-form\"\r\n                                                    layout={'inline'}\r\n                                                    onFinish={this.onSubFinish}\r\n                                                    initialValues={{\r\n                                                        name: course.name,\r\n                                                        id: course._id,\r\n                                                    }}\r\n                                                >\r\n                                                    <Form.Item\r\n                                                        name=\"name\"\r\n                                                        noStyle\r\n                                                        rules={[\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message:\r\n                                                                    'This field is required',\r\n                                                            },\r\n                                                        ]}\r\n                                                    >\r\n                                                        <Input\r\n                                                            name=\"name\"\r\n                                                            style={{ width: 160 }}\r\n                                                            placeholder={\r\n                                                                course.name\r\n                                                            }\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item name=\"id\" noStyle>\r\n                                                        <Input\r\n                                                            name=\"id\"\r\n                                                            style={{\r\n                                                                display: 'none',\r\n                                                            }}\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Button\r\n                                                        type=\"primary\"\r\n                                                        htmlType=\"submit\"\r\n                                                    >\r\n                                                        Update Name\r\n                                                </Button>\r\n                                                    <Link\r\n                                                        key={Math.random()}\r\n                                                        to={`/admin/${this.props.match.params.type}/course/${course._id}`}\r\n                                                    >\r\n                                                        <Button type=\"dashed\">\r\n                                                            Edit SubModule\r\n                                                    </Button>\r\n                                                    </Link>\r\n                                                    <Button type=\"dashed\" onClick={()=>{this.onSubDel(course._id)}}>\r\n                                                            Delete\r\n                                                    </Button>\r\n                                                </Form>\r\n                                                {/* <Divider /> */}\r\n                                            </>\r\n                                        ))}\r\n                                </ol>\r\n\r\n                                <Link\r\n                                    to={`/admin/${this.props.match.params.type}/add-course/${module._id}`}\r\n                                >\r\n                                    <Button\r\n                                        type=\"primary\"\r\n                                        htmlType=\"submit\"\r\n                                        style={{ margin: '2%' }}\r\n                                    >\r\n                                        + Add SubModule\r\n                                </Button>\r\n                                </Link>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n            );\r\n        else return null;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    module: state.modulesReducer.currentModule,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getCurrentModule: bindActionCreators(getCurrentModule, dispatch),\r\n    updateModule: bindActionCreators(updateModule, dispatch),\r\n    updateSubModule: bindActionCreators(updateSubModule, dispatch),\r\n    deleteSubModule: bindActionCreators(deleteSubModule, dispatch),\r\n    clearCurrentModule: bindActionCreators(clearCurrentModule, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Module);\r\n","export const ACTION = {\r\n    ADD_COURSE_SUCCESS: 'ADD_COURSE_SUCCESS',\r\n    SET_COURSE_NAME: \"SET_COURSE_NAME\",\r\n    SET_COURSE_THUMBNAIL: \"SET_COURSE_THUMBNAIL\",\r\n    CLEAR_ADD_COURSE: \"CLEAR_ADD_COURSE\"\r\n};","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nimport { baseUrl } from '../../../config';\r\n\r\nexport const addCourse = (val) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/add`, val)\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_COURSE_SUCCESS,\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addCourse\")\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const setCourseName = (name) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_COURSE_NAME,\r\n        payload: name\r\n    })\r\n}\r\n\r\nexport const setCourseThumbnail = (thumbnailPath) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_COURSE_THUMBNAIL,\r\n        payload: thumbnailPath\r\n    })\r\n}\r\n\r\nexport const clearAddCourse = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_ADD_COURSE\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { setCourseName, setCourseThumbnail, clearAddCourse, addCourse } from './action';\r\nimport { Form, Input, Button, Upload } from 'antd';\r\nimport imageCompression from 'browser-image-compression';\r\nimport axios from 'axios'\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport { baseUrl } from '../../../config';\r\n\r\n\r\nclass AddCourse extends Component {\r\n\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"module id : \", this.props.match.params.module_id)\r\n    }\r\n\r\n    handleSubmit = async (val) => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        await this.props.addCourse(val)\r\n        this.setState({ loading: false })\r\n        // this.props.history.push(`/module/${this.props.match.params.module_id}`)\r\n        this.props.history.goBack()\r\n    }\r\n\r\n\r\n    render() {\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            if (e.fileList.length > 1) {\r\n                e.fileList.shift();\r\n            }\r\n            console.log(\"called\")\r\n            return e && e.fileList;\r\n        };\r\n        const { name, thumbnailPath, setCourseName, setCourseThumbnail } = this.props;\r\n        return (\r\n            <div className=\"add-module\" style={{ \"display\": \"flex\", \"flexDirection\": \"column\", justifyContent: \"center\" }}>\r\n                <h2>Add Sub Module</h2>\r\n                <Form onFinish={(val) => {\r\n                    const { name, thumbnailArray } = val;\r\n                    if (thumbnailArray) {\r\n                        let thumbnail = thumbnailArray[0];\r\n                        if (thumbnail.response && thumbnail.response.location) {\r\n                            thumbnail = { name: thumbnail.name, response: thumbnail.response, status: thumbnail.status, thumbUrl: thumbnail.thumbUrl, uid: thumbnail.uid }\r\n                        }\r\n                        this.handleSubmit({\r\n                            name,\r\n                            thumbnailPath: thumbnail.response.location,\r\n                            thumbnailImage: thumbnail,\r\n                            module_id: this.props.match.params.module_id\r\n                        })\r\n                    } else {\r\n                        this.handleSubmit({\r\n                            name,\r\n                            module_id: this.props.match.params.module_id\r\n                        })\r\n                    }\r\n\r\n                }}>\r\n                    <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true }]} >\r\n                        <Input value={name} onChange={(e) => setCourseName(e.target.value)} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Thumbnail\"\r\n                        valuePropName=\"fileList\"\r\n                        name=\"thumbnailArray\"\r\n                        getValueFromEvent={normFile}\r\n                    // rules={[{ required: true, message: 'Missing Image!' }]}\r\n                    >\r\n                        <Upload multiple={false} accept=\"image/*\"\r\n                            name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                const compressedFile = await imageCompression(file, options);\r\n                                console.log(\"before compeee\")\r\n                                console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                let formData = new FormData()\r\n                                formData.set('expId', '123')\r\n                                formData.append('file', compressedFile)\r\n\r\n                                await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                    onSuccess(res.data)\r\n                                    console.log(res.data)\r\n                                }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                            }}\r\n                            listType=\"picture\"\r\n                        >\r\n                            <Button>\r\n                                <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                        </Upload>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">ADD SUB-MODULE</Button >\r\n                    </Form.Item>\r\n                </Form>\r\n\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    name: state.addCourseReducer.name,\r\n    thumbnailPath: state.addCourseReducer.thumbnailPath\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCourseName: bindActionCreators(setCourseName, dispatch),\r\n    setCourseThumbnail: bindActionCreators(setCourseThumbnail, dispatch),\r\n    clearAddCourse: bindActionCreators(clearAddCourse, dispatch),\r\n    addCourse: bindActionCreators(addCourse, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCourse)","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nimport { baseUrl } from \"../../config\"\r\nexport const getCurrentCourse = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/get/${id}`);\r\n        // console.log(\"this is current course data\",res.data)\r\n        dispatch({\r\n            type: ACTION.GET_CURRENT_COURSE,\r\n            payload: res.data.course\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getCurrentCourse\")\r\n    }\r\n}\r\n\r\nexport const getParentModule = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/getp/${id}`);\r\n        dispatch({\r\n            type: ACTION.GET_CURRENT_PARENT,\r\n            payload: res.data.name\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getParentModule\")\r\n    }\r\n}\r\n//<<<<<<<<<<<<<<<INTRODUCTION>>>>>>>>>>>>>>>>>>>>\r\n\r\nexport const setIntroductionHtml = (html) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_INTRODUCTION_HTML,\r\n        payload: html\r\n    })\r\n}\r\n\r\nexport const getIntroduction = (id) => async dispatch => {//it is introduction id, not course id\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/introduction/get/${id}`);\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.GET_INTRODCUTION_HTML,\r\n            payload: res.data.introduction.html\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getIntroduction\")\r\n    }\r\n}\r\n\r\nexport const addIntroduction = (id, html, intro_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/introduction`, {\r\n            course_id: id,\r\n            html: html,\r\n            introduction_id: intro_id\r\n        })\r\n        dispatch({\r\n            type: ACTION.ADD_INTRODUCTION_SUCCESS\r\n        })\r\n\r\n    } catch (err) {\r\n        console.log(\"error in addIntroduction\")\r\n    }\r\n}\r\n\r\nexport const clearIntroduction = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_INTRODUCTION\r\n    })\r\n}\r\n\r\n//<<<<<<<<<<<<BUILD_CIRCUIT>>>>>>>>>>>\r\n\r\nexport const getBuildCircuit = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/buildCircuit/get/${id}`)\r\n        console.log(\"asking fro get build ckt\", res.data)\r\n\r\n        dispatch({\r\n            type: ACTION.GET_BUILD_CIRCUIT,\r\n            payload: res.data.buildCircuit\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getBuildCircuit\")\r\n    }\r\n}\r\n\r\nexport const addBuildCircuit = (id, steps, code, codeStepStart, build_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/buildCircuit`, {\r\n            course_id: id,\r\n            steps,\r\n            code,\r\n            codeStepStart,\r\n            build_id: build_id\r\n        })\r\n        console.log(\"after adding resp\", res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_BUILD_CIRCUIT_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addBuildCircuit\")\r\n    }\r\n}\r\n\r\nexport const clearBuildCircuit = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_BUILD_CIRCUIT\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//<<<<<<<<<<<<EXPERIMENT>>>>>>>>>>>\r\n\r\nexport const getExperiment = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/experiment/get/${id}`)\r\n        console.log(\"asking fro get experiment\", res.data)\r\n\r\n        dispatch({\r\n            type: ACTION.GET_EXPERIMENT,\r\n            payload: res.data.experiment\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getExperiment\")\r\n    }\r\n}\r\n\r\nexport const addExperiment = (id, steps, simulationLink, finalMessage, exp_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/experiment`, {\r\n            course_id: id,\r\n            steps,\r\n            simulationLink,\r\n            finalMessage,\r\n            exp_id: exp_id\r\n        })\r\n        console.log(\"after adding resp\", res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_EXPERIMENT_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addExperiment\")\r\n    }\r\n}\r\n\r\nexport const clearExperiment = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_EXPERIMENT\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n//<<<<<<<<<<<<SIMULATION>>>>>>>>>>>\r\n\r\nexport const getSimulation = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/simulation/get/${id}`)\r\n        console.log(\"asking fro get simulation\", res.data)\r\n\r\n        dispatch({\r\n            type: ACTION.GET_SIMULATION,\r\n            payload: res.data.simulation\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getSimulation\")\r\n    }\r\n}\r\n\r\nexport const addSimulation = (id, steps, simulationLink, finalMessage, sim_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/simulation`, {\r\n            course_id: id,\r\n            steps,\r\n            simulationLink,\r\n            finalMessage,\r\n            sim_id: sim_id\r\n        })\r\n        console.log(\"after adding resp\", res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_SIMULATION_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addSimulation\")\r\n    }\r\n}\r\n\r\nexport const clearSimulation = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_SIMULATION\r\n    })\r\n}\r\n\r\n//<<<<<<<<<<<<VIDEOEMBED>>>>>>>>>>>\r\n\r\nexport const getVideoEmbed = (id) => async(dispatch) => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/videoembed/get/${id}`)\r\n        dispatch({\r\n            type: ACTION.GET_VIDEOEMBED,\r\n            payload: res.data.videoembed\r\n        })\r\n    } catch (error) {\r\n        console.log(error in getVideoEmbed, error);\r\n    }\r\n}\r\n\r\nexport const addVideoEmbed = (id, title, url) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/videoembed`,{\r\n            course_id: id,\r\n            title,\r\n            url\r\n        })\r\n        dispatch({\r\n            type: ACTION.ADD_VIDEOEMBED_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addVideoEmbed\")\r\n    }\r\n}\r\n\r\nexport const clearVideoEmbed = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_VIDEOEMBED\r\n    })\r\n}\r\n\r\n//<<<<<<<<<<<EXPERIMENT_FORM>>>>>>>>>>>>>\r\n\r\n\r\nexport const addExperimentForm = (id, formContent, exp_id) => async dispatch => {\r\n    try {\r\n        console.log(\"herrrrrrrrrrrrrrrrrrrr\")\r\n        const res = await axios.post(`${baseUrl}/api/course/experimentForm`, {\r\n            course_id: id,\r\n            formContent,\r\n            exp_id: exp_id\r\n        })\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_EXPERIMENT_FORM_SUCCESS\r\n        })\r\n\r\n    } catch (err) {\r\n        console.log(\"error in addExperimentForm\")\r\n    }\r\n}\r\n\r\n\r\n\r\n//<<<<<<<<<<<RESULTS>>>>>>>>>>>>>\r\n\r\n\r\nexport const addResults = (id, formContent, results_id) => async dispatch => {\r\n    try {\r\n        console.log(\"herrrrrrrrrrrrrrrrrrrr\")\r\n        const res = await axios.post(`${baseUrl}/api/course/results`, {\r\n            course_id: id,\r\n            formContent,\r\n            results_id\r\n        })\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_RESULTS_SUCCESS\r\n        })\r\n\r\n    } catch (err) {\r\n        console.log(\"error in addResults\")\r\n    }\r\n}\r\n\r\n\r\n//<<<<<<<<<<<<TROUBLESHOOT>>>>>>>>>>>\r\n\r\nexport const getTroubleshoot = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/troubleshoot/get/${id}`)\r\n        console.log(\"asking for get troubleshoot\", res.data)\r\n\r\n        dispatch({\r\n            type: ACTION.GET_TROUBLESHOOT,\r\n            payload: res.data.troubleshoot\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getTroubleshoot\")\r\n    }\r\n}\r\n\r\nexport const addTroubleshoot = (id, faqs, troubleshoot_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/troubleshoot`, {\r\n            course_id: id,\r\n            faqs: faqs,\r\n            troubleshoot_id: troubleshoot_id\r\n        })\r\n        console.log(\"after adding resp\", res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_TROUBLESHOOT_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addTroubleshoot\")\r\n    }\r\n}\r\n\r\nexport const clearTroubleshoot = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_TROUBLESHOOT\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//<<<<<<<<<<<<EXCERCISE>>>>>>>>>>>\r\n\r\nexport const getExcercise = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/excercise/get/${id}`)\r\n        console.log(\"asking for get excercise\", res.data)\r\n\r\n        dispatch({\r\n            type: ACTION.GET_EXCERCISE,\r\n            payload: res.data.excercise\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getExcercise\")\r\n    }\r\n}\r\n\r\nexport const addExcercise = (id, excercise_list, excerciseFiles, excerciseFilePaths, excercise_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/excercise`, {\r\n            course_id: id,\r\n            excercise_list: excercise_list,\r\n            excerciseFiles,\r\n            excerciseFilePaths,\r\n            excercise_id: excercise_id\r\n        })\r\n        console.log(\"after adding resp\", res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_EXCERCISE_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addExcercise\")\r\n    }\r\n}\r\n\r\nexport const clearExcercise = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_EXCERCISE\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nexport const clearAdminSubmodule = () => dispatch => {\r\n\r\n    dispatch({\r\n        type: ACTION.CLEAR_ADMIN_SUBMODULE\r\n    })\r\n}\r\n\r\nexport const deleteType = (id, field) => async dispatch => {\r\n    const res = await axios.get(`${baseUrl}/api/course/reset/${field}/${id}`)\r\n    dispatch({\r\n        type: ACTION.DELETE_TYPE\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getCurrentCourse, getParentModule, clearAdminSubmodule, deleteType } from './action';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\nimport { SUBMODULE, GETTINGSTARTED } from '../../config';\r\nimport './styles.scss';\r\n\r\nclass Course extends Component {\r\n    componentDidMount() {\r\n        // console.log(this.props.match.params.id);\r\n        this.props.getCurrentCourse(this.props.match.params.id);\r\n        this.props.getParentModule(this.props.match.params.id);\r\n    }\r\n    onDel = async (id, field) => {\r\n        await this.props.deleteType(id, field);\r\n        this.props.history.go(0);\r\n    };\r\n    // componentWillUnmount() {\r\n    //     this.props.clearAdminSubmodule();\r\n    // }\r\n    render() {\r\n        const { course, parent } = this.props;\r\n        return (\r\n            <div className=\"submod-divs-container\">\r\n                <h2>\r\n                    {' '}\r\n                    {SUBMODULE.toUpperCase()} : {course.name}\r\n                </h2>\r\n\r\n                <br />\r\n                {parent !== GETTINGSTARTED && (\r\n                    <div className=\"divslist\">\r\n                        <div style={{ \"display\": \"flex\" }}>\r\n\r\n                            <Button className=\"button-divs\">\r\n                                <Link\r\n                                    to={`/admin/${this.props.match.params.type}/course/introduction/${this.props.match.params.id}`}\r\n                                >\r\n                                    INTRODUCTION\r\n                                </Link>\r\n                            </Button>\r\n                            <Button danger className=\"button-divs delete-divs\">\r\n                                <Link\r\n                                    onClick={() => { this.onDel(this.props.match.params.id, \"introduction\") }}\r\n                                >\r\n                                    DELETE\r\n                                </Link>\r\n                            </Button>\r\n\r\n                        </div>\r\n                        <div style={{ \"display\": \"flex\" }}>\r\n\r\n                            <Button className=\"button-divs\">\r\n                                <Link\r\n                                    to={`/admin/${this.props.match.params.type}/course/build-circuit/${this.props.match.params.id}`}\r\n                                >\r\n                                    BUILD CIRCUIT\r\n                                </Link>\r\n                            </Button>\r\n                            <Button danger className=\"button-divs delete-divs\">\r\n\r\n                                <Link\r\n                                    onClick={() => { this.onDel(this.props.match.params.id, \"buildCircuit\") }}\r\n                                >\r\n                                    DELETE\r\n                                </Link>\r\n                            </Button>\r\n                        </div>\r\n                        {\r\n                            this.props.match.params.type === 'digital' ? (\r\n                                <div style={{ \"display\": \"flex\" }}>\r\n\r\n                                    <Button className=\"button-divs\">\r\n                                        <Link\r\n                                            to={`/admin/${this.props.match.params.type}/course/simulation/${this.props.match.params.id}`}\r\n                                        >\r\n                                            SIMULATION\r\n                                        </Link>\r\n                                    </Button>\r\n                                    <Button danger className=\"button-divs delete-divs\">\r\n                                        <Link\r\n                                            onClick={() => { this.onDel(this.props.match.params.id, \"simulation\") }}\r\n                                        >\r\n                                            DELETE\r\n                                        </Link>\r\n                                    </Button>\r\n\r\n                                </div>\r\n                            ) : null\r\n                        }\r\n\r\n                        {\r\n                            this.props.match.params.type === 'arduino' ? (\r\n                                <div style={{ \"display\": \"flex\" }}>\r\n                                    <Button className=\"button-divs\">\r\n                                        <Link\r\n                                            to={`/admin/${this.props.match.params.type}/course/videoembed/${this.props.match.params.id}`}\r\n                                        >\r\n                                            VIDEO\r\n                                        </Link>\r\n                                    </Button>\r\n                                    <Button danger className=\"button-divs delete-divs\">\r\n                                        <Link\r\n                                            onClick={() => { this.onDel(this.props.match.params.id, \"videoembed\") }}\r\n                                        >\r\n                                            DELETE\r\n                                        </Link>\r\n                                    </Button>\r\n\r\n                                </div>\r\n                            ) : null\r\n                        }\r\n                        <div style={{ \"display\": \"flex\" }}>\r\n                            <Button className=\"button-divs\">\r\n                                <Link\r\n                                    to={`/admin/${this.props.match.params.type}/course/experiment/${this.props.match.params.id}`}\r\n                                >\r\n                                    EXPERIMENT\r\n                                </Link>\r\n                            </Button>\r\n                            <Button danger className=\"button-divs delete-divs\">\r\n\r\n                                <Link\r\n                                    onClick={() => { this.onDel(this.props.match.params.id, \"experiment\") }}\r\n                                >\r\n                                    DELETE\r\n                                </Link>\r\n                            </Button>\r\n\r\n                        </div>\r\n                        {course.experiment &&\r\n                            this.props.match.params.type === 'digital' ? (\r\n                            <>\r\n                                <Button className=\"button-divs\">\r\n                                    <Link\r\n                                        to={`/admin/${this.props.match.params.type}/course/experiment-form/${this.props.match.params.id}/${course.experiment}`}\r\n                                    >\r\n                                        EXPERIMENT FORM\r\n                                    </Link>\r\n                                </Button>\r\n                            </>\r\n                        ) : null}\r\n                        <div style={{ \"display\": \"flex\" }}>\r\n                            <Button className=\"button-divs\">\r\n                                <Link\r\n                                    to={`/admin/${this.props.match.params.type}/course/troubleshoot/${this.props.match.params.id}`}\r\n                                >\r\n                                    TROUBLESHOOT\r\n                                </Link>\r\n                            </Button>\r\n                            <Button danger className=\"button-divs delete-divs\">\r\n\r\n                                <Link\r\n                                    onClick={() => { this.onDel(this.props.match.params.id, \"troubleshoot\") }}\r\n                                >\r\n                                    DELETE\r\n                                </Link>\r\n                            </Button>\r\n\r\n                        </div>\r\n                        <div style={{ \"display\": \"flex\" }}>\r\n\r\n                            <Button className=\"button-divs\">\r\n                                <Link\r\n                                    to={`/admin/${this.props.match.params.type}/course/results/${this.props.match.params.id}`}\r\n                                >\r\n                                    RESULTS AND ANALYSIS\r\n                                </Link>\r\n                            </Button>\r\n                            <Button danger className=\"button-divs delete-divs\">\r\n\r\n                                <Link\r\n                                    onClick={() => { this.onDel(this.props.match.params.id, \"results\") }}\r\n                                >\r\n                                    DELETE\r\n                                </Link>\r\n                            </Button>\r\n                        </div>\r\n                        <div style={{ \"display\": \"flex\" }}>\r\n\r\n                            <Button className=\"button-divs\">\r\n                                <Link\r\n                                    to={`/admin/${this.props.match.params.type}/course/excercise/${this.props.match.params.id}`}\r\n                                >\r\n                                    EXCERCISE\r\n                                </Link>\r\n                            </Button>\r\n                            <Button danger className=\"button-divs delete-divs\">\r\n                                <Link\r\n                                    onClick={() => { this.onDel(this.props.match.params.id, \"excercise\") }}\r\n                                >\r\n                                    DELETE\r\n                                </Link>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {parent === GETTINGSTARTED && (\r\n                    <>\r\n                        <Button>\r\n                            <Link\r\n                                to={{\r\n                                    pathname: `/admin/${this.props.match.params.type}/course/experiment/${this.props.match.params.id}`,\r\n                                    state: { gettingStarted: true },\r\n                                }}\r\n                            >\r\n                                ADD INFOGRAPHICS\r\n                            </Link>\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    course: state.courseReducer.currentCourse,\r\n    parent: state.courseReducer.currentParent,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getCurrentCourse: bindActionCreators(getCurrentCourse, dispatch),\r\n    getParentModule: bindActionCreators(getParentModule, dispatch),\r\n    clearAdminSubmodule: bindActionCreators(clearAdminSubmodule, dispatch),\r\n    deleteType: bindActionCreators(deleteType, dispatch)\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Course);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TextEditor from '../../TextEditor'\r\nimport { bindActionCreators } from 'redux'\r\nimport { setIntroductionHtml, addIntroduction, getIntroduction, clearIntroduction } from '../action'\r\nimport { Form, Button, notification } from 'antd'\r\n\r\nclass AddIntroduction extends Component {\r\n\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        const { introductionHtml, addIntroduction, clearIntroduction, currentCourse } = this.props;\r\n        if (introductionHtml) {\r\n            this.setState({ loading: true })\r\n            await addIntroduction(this.props.match.params.id, introductionHtml, currentCourse.introduction)\r\n            this.setState({ loading: false })\r\n            clearIntroduction()\r\n            // this.props.history.push(`/course/${this.props.match.params.id}`)\r\n            this.props.history.goBack();\r\n        } else {\r\n            this.openNotificationWithIcon('warning', 'Please fill all the fields')\r\n        }\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentCourse.introduction) {\r\n            console.log(\"has introduction, gotta call server\")\r\n            this.props.getIntroduction(this.props.currentCourse.introduction)\r\n        } else {\r\n            console.log(\"does not ahve any introduction astart from the first\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //????\r\n        this.props.clearIntroduction();\r\n    }\r\n\r\n    render() {\r\n        const { introductionHtml, setIntroductionHtml } = this.props;\r\n        return (\r\n            <div style={{ border: \"2px solid black\", margin: \"2%\", padding: \"2%\" }}>\r\n\r\n                <h2>{this.props.currentCourse.name.toUpperCase()} : Introduction</h2>\r\n                <div classname=\"add-module\" style={{ \"display\": \"flex\", \"flexDirection\": \"column\", justifyContent: \"center\" }}>\r\n                    <Form.Item label=\"Introduction\">\r\n                        <TextEditor content={introductionHtml} handleEditorChange={setIntroductionHtml}></TextEditor>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button loading={this.state.loading} onClick={this.handleSubmit} type=\"primary\" htmlType=\"submit\">ADD/UPDATE INTRODUCTION</Button>\r\n                    </Form.Item>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    introductionHtml: state.courseReducer.introductionHtml\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setIntroductionHtml: bindActionCreators(setIntroductionHtml, dispatch),\r\n    addIntroduction: bindActionCreators(addIntroduction, dispatch),\r\n    getIntroduction: bindActionCreators(getIntroduction, dispatch),\r\n    clearIntroduction: bindActionCreators(clearIntroduction, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddIntroduction)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport { addExperiment, clearExperiment, getExperiment } from '../action';\r\nimport axios from \"axios\"\r\nimport imageCompression from 'browser-image-compression';\r\n\r\nimport { Form, Input, Button, notification, Upload } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { baseUrl } from '../../../config';\r\n\r\nclass AddExperiment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentCourse.experiment) {\r\n            console.log(\"has experiment, gotta call server\")\r\n            this.props.getExperiment(this.props.currentCourse.experiment)\r\n        } else {\r\n            console.log(\"does not have any experiment start from the first\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearExperiment()\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        console.log(this.props.location.state?.gettingStarted)\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            if (e.fileList.length > 1) {\r\n                e.fileList.shift();\r\n            }\r\n            console.log(\"called\")\r\n            return e && e.fileList;\r\n        };\r\n\r\n        if (this.props.currentCourse.experiment && this.props.experiment) {\r\n            console.log(\"FIRST FORM\")\r\n\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Experiment</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.experiment} onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { steps, simulationLink, finalMessage } = val;\r\n                        let success = 1;\r\n                        if (steps.length) {\r\n\r\n                            let newSteps;\r\n\r\n                            if (this.props.match.params.type === \"digital\" && this.props.location.state?.gettingStarted) {\r\n                                newSteps = steps.map(step => {\r\n                                    const { upload_image, description, simulationLink } = step;\r\n                                    if (simulationLink) {\r\n                                        return {\r\n                                            description,\r\n                                            simulationLink\r\n                                        }\r\n                                    }\r\n                                    else if (upload_image && upload_image.length && upload_image[0].response && upload_image[0].response.location) {\r\n                                        return {\r\n                                            description,\r\n                                            upload_image: [{\r\n                                                name: upload_image[0].name,\r\n                                                response: upload_image[0].response,\r\n                                                status: upload_image[0].status,\r\n                                                thumbUrl: upload_image[0].thumbUrl,\r\n                                                uid: upload_image[0].uid,\r\n                                            }],\r\n                                            imagePath: upload_image[0].response.location\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        success = 0\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                newSteps = steps.map(step => {\r\n                                    const { upload_image, upload_side, description } = step;\r\n\r\n\r\n                                    if (upload_image && upload_image[0]?.response?.location) {\r\n\r\n                                        if (upload_side && upload_side.length && upload_side[0]?.response?.location) {\r\n                                            return {\r\n                                                description,\r\n                                                upload_image: [{\r\n                                                    name: upload_image[0].name,\r\n                                                    response: upload_image[0].response,\r\n                                                    status: upload_image[0].status,\r\n                                                    thumbUrl: upload_image[0].thumbUrl,\r\n                                                    uid: upload_image[0].uid\r\n                                                }],\r\n                                                imagePath: upload_image[0].response.location,\r\n                                                upload_side: [{\r\n                                                    name: upload_side[0].name,\r\n                                                    // originalFileObj: upload_side[0].originalFileObj,\r\n                                                    response: upload_side[0].response,\r\n                                                    status: upload_side[0].status,\r\n                                                    thumbUrl: upload_side[0].thumbUrl,\r\n                                                    uid: upload_side[0].uid\r\n                                                }],\r\n                                                sideImagePath: upload_image[0].response.location\r\n                                            }\r\n                                        }\r\n\r\n                                        return {\r\n                                            description,\r\n                                            upload_image: [{\r\n                                                name: upload_image[0].name,\r\n                                                response: upload_image[0].response,\r\n                                                status: upload_image[0].status,\r\n                                                thumbUrl: upload_image[0].thumbUrl,\r\n                                                uid: upload_image[0].uid\r\n                                            }],\r\n                                            imagePath: upload_image[0].response.location\r\n                                        }\r\n\r\n                                    }\r\n\r\n                                    else {\r\n                                        success = 0;\r\n                                    }\r\n                                })\r\n                            }\r\n\r\n\r\n\r\n                            if (success) {\r\n\r\n                                this.setState({ loading: true })\r\n                                await this.props.addExperiment(this.props.match.params.id, newSteps, simulationLink, finalMessage, this.props.currentCourse.experiment)\r\n                                this.setState({ loading: false })\r\n                                this.props.clearExperiment()\r\n                                this.props.history.goBack()\r\n                            } else {\r\n                                this.openNotificationWithIcon('error', 'Please make sure all the images have been successfully uploaded')\r\n                            }\r\n\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n                        }\r\n                    }\r\n                    }>\r\n\r\n                        {/*FOR DIGITAL*/}\r\n\r\n                        <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n\r\n                                                    {this.props.match.params.type === \"digital\" && this.props.location.state?.gettingStarted ?\r\n                                                        <>\r\n                                                            <Form.Item\r\n                                                                label={`Simulation Link${index + 1}`}\r\n                                                                {...field}\r\n                                                                key={\"sim-link\" + index}\r\n                                                                name={[field.name, 'simulationLink']}\r\n                                                            >\r\n                                                                <Input autosize={{ minRows: 1 }} />\r\n                                                            </Form.Item>\r\n                                                            <span style={{ textAlign: \"center\" }}>OR</span>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                key={\"upload_image\" + index}\r\n                                                                // {...formItemLayoutWithOutLabel}\r\n                                                                name={[field.name, 'upload_image']}\r\n                                                                valuePropName=\"fileList\"\r\n                                                                getValueFromEvent={normFile}\r\n                                                                fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                            >\r\n                                                                <Upload multiple={false} accept=\"image/*\"\r\n                                                                    name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                        const compressedFile = await imageCompression(file, options);\r\n                                                                        console.log(\"before compeee\")\r\n                                                                        console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                        console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                        console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                        console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                        let formData = new FormData()\r\n                                                                        formData.set('expId', '123')\r\n\r\n                                                                        formData.append('file', compressedFile)\r\n                                                                        await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                            onSuccess(res.data)\r\n                                                                            console.log(res.data)\r\n                                                                        }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                    }}\r\n                                                                    listType=\"picture\"\r\n                                                                >\r\n                                                                    <Button>\r\n                                                                        <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                                </Upload>\r\n                                                            </Form.Item>\r\n\r\n\r\n                                                        </> :\r\n\r\n                                                        <>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                key={\"upload_image\" + index}\r\n                                                                {...formItemLayoutWithOutLabel}\r\n                                                                name={[field.name, 'upload_image']}\r\n                                                                valuePropName=\"fileList\"\r\n                                                                getValueFromEvent={normFile}\r\n                                                                fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                                rules={[{ required: true, message: 'Missing Image!' }]}\r\n                                                            >\r\n                                                                <Upload multiple={false} accept=\"image/*\"\r\n                                                                    name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                        const compressedFile = await imageCompression(file, options);\r\n                                                                        console.log(\"before compeee\")\r\n                                                                        console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                        console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                        console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                        console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                        let formData = new FormData()\r\n                                                                        formData.set('expId', '123')\r\n\r\n                                                                        formData.append('file', compressedFile)\r\n                                                                        await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                            onSuccess(res.data)\r\n                                                                            console.log(res.data)\r\n                                                                        }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                    }}\r\n                                                                    listType=\"picture\"\r\n                                                                >\r\n                                                                    <Button>\r\n                                                                        <UploadOutlined /> Upload Image\r\n                                                                    </Button>\r\n                                                                </Upload>\r\n                                                            </Form.Item>\r\n\r\n                                                            {this.props.match.params.type === \"digital\" ?\r\n                                                                <Form.Item\r\n                                                                    {...field}\r\n                                                                    key={\"upload_side\" + index}\r\n                                                                    {...formItemLayoutWithOutLabel}\r\n                                                                    name={[field.name, 'upload_side']}\r\n                                                                    valuePropName=\"fileList\"\r\n                                                                    getValueFromEvent={normFile}\r\n                                                                    fieldKey={[field.fieldKey, 'upload_side']}\r\n                                                                >\r\n                                                                    <Upload multiple={false} accept=\"image/*\"\r\n                                                                        name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                            const compressedFile = await imageCompression(file, options);\r\n                                                                            console.log(\"before compeee\")\r\n                                                                            console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                            console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                            console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                            console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                            let formData = new FormData()\r\n\r\n                                                                            formData.append('file', compressedFile)\r\n                                                                            await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                                onSuccess(res.data)\r\n                                                                                console.log(res.data)\r\n                                                                            }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                        }}\r\n                                                                        listType=\"picture\"\r\n                                                                    >\r\n                                                                        <Button>\r\n                                                                            <UploadOutlined /> Upload Side Image (if any)\r\n                                                                    </Button>\r\n                                                                    </Upload>\r\n                                                                </Form.Item>\r\n                                                                :\r\n                                                                null\r\n                                                            }\r\n                                                        </>\r\n\r\n                                                    }\r\n\r\n\r\n\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        {this.props.match.params.type === \"digital\" && !this.props.location.state?.gettingStarted ? <Form.Item initialValue=\"Experiment is Over!\" label=\"Final message\" name=\"finalMessage\" rules={[{ required: true }]}>\r\n                            <Input.TextArea autoSize={{ minRows: 2 }} />\r\n                        </Form.Item> : null}\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                        <p>***Update only if any changes are made, otherwise it may take time***</p>\r\n\r\n                    </Form>\r\n                </div>\r\n            )\r\n        } else if (!this.props.currentCourse.experiment) {\r\n            console.log(\"SECOND FORM\")\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Experiment</h2>\r\n\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { steps, simulationLink, finalMessage } = val;\r\n                        let success = 1;\r\n                        if (steps.length) {\r\n\r\n\r\n                            let newSteps;\r\n\r\n                            if (this.props.match.params.type === \"digital\" && this.props.location.state?.gettingStarted) {\r\n                                newSteps = steps.map(step => {\r\n                                    const { upload_image, description, simulationLink } = step;\r\n                                    if (simulationLink) {\r\n                                        return {\r\n                                            description,\r\n                                            simulationLink\r\n                                        }\r\n                                    }\r\n                                    else if (upload_image && upload_image.length && upload_image[0].response && upload_image[0].response.location) {\r\n                                        return {\r\n                                            description,\r\n                                            upload_image: [{\r\n                                                name: upload_image[0].name,\r\n                                                response: upload_image[0].response,\r\n                                                status: upload_image[0].status,\r\n                                                thumbUrl: upload_image[0].thumbUrl,\r\n                                                uid: upload_image[0].uid,\r\n                                            }],\r\n                                            imagePath: upload_image[0].response.location\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        success = 0\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                newSteps = steps.map(step => {\r\n                                    const { upload_image, upload_side, description } = step;\r\n\r\n\r\n                                    if (upload_image && upload_image[0]?.response?.location) {\r\n\r\n                                        if (upload_side && upload_side.length && upload_side[0]?.response?.location) {\r\n                                            return {\r\n                                                description,\r\n                                                upload_image: [{\r\n                                                    name: upload_image[0].name,\r\n                                                    response: upload_image[0].response,\r\n                                                    status: upload_image[0].status,\r\n                                                    thumbUrl: upload_image[0].thumbUrl,\r\n                                                    uid: upload_image[0].uid\r\n                                                }],\r\n                                                imagePath: upload_image[0].response.location,\r\n                                                upload_side: [{\r\n                                                    name: upload_side[0].name,\r\n                                                    // originalFileObj: upload_side[0].originalFileObj,\r\n                                                    response: upload_side[0].response,\r\n                                                    status: upload_side[0].status,\r\n                                                    thumbUrl: upload_side[0].thumbUrl,\r\n                                                    uid: upload_side[0].uid\r\n                                                }],\r\n                                                sideImagePath: upload_image[0].response.location\r\n                                            }\r\n                                        }\r\n\r\n                                        return {\r\n                                            description,\r\n                                            upload_image: [{\r\n                                                name: upload_image[0].name,\r\n                                                response: upload_image[0].response,\r\n                                                status: upload_image[0].status,\r\n                                                thumbUrl: upload_image[0].thumbUrl,\r\n                                                uid: upload_image[0].uid\r\n                                            }],\r\n                                            imagePath: upload_image[0].response.location\r\n                                        }\r\n\r\n                                    }\r\n\r\n                                    else {\r\n                                        success = 0;\r\n                                    }\r\n                                })\r\n                            }\r\n\r\n\r\n\r\n                            if (success) {\r\n\r\n                                this.setState({ loading: true })\r\n                                await this.props.addExperiment(this.props.match.params.id, newSteps, simulationLink, finalMessage, this.props.currentCourse.experiment)\r\n                                this.setState({ loading: false })\r\n                                this.props.clearExperiment()\r\n                                this.props.history.goBack()\r\n                            } else {\r\n                                this.openNotificationWithIcon('error', 'Please make sure all the images have been successfully uploaded')\r\n                            }\r\n\r\n\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n\r\n                        }\r\n\r\n\r\n                    }}>\r\n                        {/*FOR DIGITAL*/}\r\n\r\n                        <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n\r\n                                                    {this.props.match.params.type === \"digital\" && this.props.location.state?.gettingStarted ?\r\n                                                        <>\r\n                                                            <Form.Item\r\n                                                                label={`Simulation Link${index + 1}`}\r\n                                                                {...field}\r\n                                                                key={\"sim-link\" + index}\r\n                                                                name={[field.name, 'simulationLink']}\r\n                                                            >\r\n                                                                <Input autosize={{ minRows: 1 }} />\r\n                                                            </Form.Item>\r\n                                                            <span style={{ textAlign: \"center\" }}>OR</span>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                key={\"upload_image\" + index}\r\n                                                                // {...formItemLayoutWithOutLabel}\r\n                                                                name={[field.name, 'upload_image']}\r\n                                                                valuePropName=\"fileList\"\r\n                                                                getValueFromEvent={normFile}\r\n                                                                fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                            >\r\n                                                                <Upload multiple={false} accept=\"image/*\"\r\n                                                                    name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                        const compressedFile = await imageCompression(file, options);\r\n                                                                        console.log(\"before compeee\")\r\n                                                                        console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                        console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                        console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                        console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                        let formData = new FormData()\r\n                                                                        formData.set('expId', '123')\r\n\r\n                                                                        formData.append('file', compressedFile)\r\n                                                                        await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                            onSuccess(res.data)\r\n                                                                            console.log(res.data)\r\n                                                                        }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                    }}\r\n                                                                    listType=\"picture\"\r\n                                                                >\r\n                                                                    <Button>\r\n                                                                        <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                                </Upload>\r\n                                                            </Form.Item>\r\n\r\n\r\n                                                        </> :\r\n\r\n                                                        <>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                key={\"upload_image\" + index}\r\n                                                                {...formItemLayoutWithOutLabel}\r\n                                                                name={[field.name, 'upload_image']}\r\n                                                                valuePropName=\"fileList\"\r\n                                                                getValueFromEvent={normFile}\r\n                                                                fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                                rules={[{ required: true, message: 'Missing Image!' }]}\r\n                                                            >\r\n                                                                <Upload multiple={false} accept=\"image/*\"\r\n                                                                    name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                        const compressedFile = await imageCompression(file, options);\r\n                                                                        console.log(\"before compeee\")\r\n                                                                        console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                        console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                        console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                        console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                        let formData = new FormData()\r\n                                                                        formData.set('expId', '123')\r\n\r\n                                                                        formData.append('file', compressedFile)\r\n                                                                        await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                            onSuccess(res.data)\r\n                                                                            console.log(res.data)\r\n                                                                        }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                    }}\r\n                                                                    listType=\"picture\"\r\n                                                                >\r\n                                                                    <Button>\r\n                                                                        <UploadOutlined /> Upload Image\r\n                                                                    </Button>\r\n                                                                </Upload>\r\n                                                            </Form.Item>\r\n\r\n                                                            {this.props.match.params.type === \"digital\" ?\r\n                                                                <Form.Item\r\n                                                                    {...field}\r\n                                                                    key={\"upload_side\" + index}\r\n                                                                    {...formItemLayoutWithOutLabel}\r\n                                                                    name={[field.name, 'upload_side']}\r\n                                                                    valuePropName=\"fileList\"\r\n                                                                    getValueFromEvent={normFile}\r\n                                                                    fieldKey={[field.fieldKey, 'upload_side']}\r\n                                                                >\r\n                                                                    <Upload multiple={false} accept=\"image/*\"\r\n                                                                        name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                            const compressedFile = await imageCompression(file, options);\r\n                                                                            console.log(\"before compeee\")\r\n                                                                            console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                            console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                            console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                            console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                            let formData = new FormData()\r\n\r\n                                                                            formData.append('file', compressedFile)\r\n                                                                            await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                                onSuccess(res.data)\r\n                                                                                console.log(res.data)\r\n                                                                            }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                        }}\r\n                                                                        listType=\"picture\"\r\n                                                                    >\r\n                                                                        <Button>\r\n                                                                            <UploadOutlined /> Upload Side Image (if any)\r\n                                                                    </Button>\r\n                                                                    </Upload>\r\n                                                                </Form.Item>\r\n                                                                :\r\n                                                                null\r\n                                                            }\r\n                                                        </>\r\n                                                    }\r\n\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        {this.props.match.params.type === \"digital\" && !this.props.location.state?.gettingStarted ? <Form.Item initialValue=\"Experiment is Over!\" label=\"Final message\" name=\"finalMessage\" rules={[{ required: true }]}>\r\n                            <Input.TextArea autoSize={{ minRows: 2 }} />\r\n                        </Form.Item> : null}\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                        <p>***Update only if any changes are made, otherwise it may take time***</p>\r\n                    </Form>\r\n                </div>)\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    experiment: state.courseReducer.experiment\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addExperiment: bindActionCreators(addExperiment, dispatch),\r\n    clearExperiment: bindActionCreators(clearExperiment, dispatch),\r\n    getExperiment: bindActionCreators(getExperiment, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddExperiment)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport { addSimulation, clearSimulation, getSimulation } from '../action';\r\nimport axios from \"axios\"\r\nimport imageCompression from 'browser-image-compression';\r\n\r\nimport { Form, Input, Button, notification, Upload } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { baseUrl } from '../../../config';\r\n\r\nclass AddSimulation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentCourse.simulation) {\r\n            console.log(\"has simulation, gotta call server\")\r\n            this.props.getSimulation(this.props.currentCourse.simulation)\r\n        } else {\r\n            console.log(\"does not have any simulation start from the first\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearSimulation()\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            if (e.fileList.length > 1) {\r\n                e.fileList.shift();\r\n            }\r\n            console.log(\"called\")\r\n            return e && e.fileList;\r\n        };\r\n\r\n        if (this.props.currentCourse.simulation && this.props.simulation) {\r\n            console.log(\"FIRST FORM\")\r\n\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Simulation</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.simulation} onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { steps, simulationLink, finalMessage } = val;\r\n                        let success = 1;\r\n                        if (steps.length) {\r\n\r\n                            this.setState({ loading: true })\r\n                            await this.props.addSimulation(this.props.match.params.id, steps, simulationLink, finalMessage, this.props.currentCourse.simulation)\r\n                            this.setState({ loading: false })\r\n                            console.log(\"aboutt to cler\")\r\n                            this.props.clearSimulation()\r\n                            console.log(\"about to go back\")\r\n                            this.props.history.goBack()\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n                        }\r\n                    }\r\n                    }>\r\n\r\n                        {/*FOR DIGITAL*/}\r\n\r\n                        <Form.Item name=\"simulationLink\" label=\"Simulation Link\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n\r\n\r\n                        <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item initialValue=\"Simulation is Over . Now Let's proceed to Results and Analysis\" label=\"Final message\" name=\"finalMessage\" rules={[{ required: true }]}>\r\n                            <Input.TextArea autoSize={{ minRows: 2 }} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </div>\r\n            )\r\n        } else if (!this.props.currentCourse.simulation) {\r\n            console.log(\"SECOND FORM\")\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Simulation</h2>\r\n\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { steps, simulationLink, finalMessage } = val;\r\n                        if (steps.length) {\r\n                            this.setState({ loading: true })\r\n                            await this.props.addSimulation(this.props.match.params.id, steps, simulationLink, finalMessage, this.props.currentCourse.simulation)\r\n                            this.setState({ loading: false })\r\n                            console.log(\"abt to cler\")\r\n                            this.props.clearSimulation()\r\n                            console.log(\"abt to go back\")\r\n                            this.props.history.goBack()\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n\r\n                        }\r\n\r\n\r\n                    }}>\r\n                        {/*FOR DIGITAL*/}\r\n\r\n                        <Form.Item name=\"simulationLink\" label=\"Simulation Link\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item initialValue=\"Simulation is Over . Now Let's proceed to Results and Analysis\" label=\"Final message\" name=\"finalMessage\" rules={[{ required: true }]}>\r\n                            <Input.TextArea autoSize={{ minRows: 2 }} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                        <p>***Update only if any changes are made, otherwise it may take time***</p>\r\n                    </Form>\r\n                </div>)\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    simulation: state.courseReducer.simulation\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addSimulation: bindActionCreators(addSimulation, dispatch),\r\n    clearSimulation: bindActionCreators(clearSimulation, dispatch),\r\n    getSimulation: bindActionCreators(getSimulation, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSimulation)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getVideoEmbed, addVideoEmbed, clearVideoEmbed } from '../action';\r\n\r\nimport { Form, Input, Button, notification } from 'antd';\r\n\r\nclass AddVideoEmbed extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentCourse.videoembed) {\r\n            this.props.getVideoEmbed(this.props.currentCourse.videoembed);\r\n        } else {\r\n            console.log('Does not have any videoembed start from the first');\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearVideoEmbed();\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        if (this.props.currentCourse.videoembed && this.props.videoembed) {\r\n            console.log('FIRST FORM, HAS EMBED', this.props);\r\n            const urlEmbed = this.props.videoembed.url;\r\n            const titleEmbed = this.props.videoembed.title;\r\n\r\n            return (\r\n                <div\r\n                    style={{\r\n                        margin: '3%',\r\n                        padding: '2% ',\r\n                        border: '2px solid black',\r\n                    }}\r\n                >\r\n                    <h2>\r\n                        {this.props.currentCourse.name.toUpperCase()} : Video\r\n                        Embed\r\n                    </h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form\r\n                        initialValues={this.props.videoembed}\r\n                        onFinish={async (val) => {\r\n                            const { titleEmbed, urlEmbed } = val;\r\n                            console.log('urlsett:', urlEmbed);\r\n                            let success = 1;\r\n                            if (urlEmbed !== '') {\r\n                                this.setState({ loading: true });\r\n                                await this.props.addVideoEmbed(\r\n                                    this.props.match.params.id,\r\n                                    titleEmbed,\r\n                                    urlEmbed\r\n                                    // this.props.currentCourse.videoembed\r\n                                );\r\n                                this.setState({ loading: false });\r\n                                console.log('about to clear');\r\n                                this.props.clearVideoEmbed();\r\n                                console.log('about to go back');\r\n                                this.props.history.goBack();\r\n                            } else {\r\n                                this.openNotificationWithIcon(\r\n                                    'error',\r\n                                    'Please make sure at least link is there'\r\n                                );\r\n                            }\r\n                        }}\r\n                    >\r\n                        {/*FOR ARDUINO*/}\r\n                        <Form.Item\r\n                            // initialValue=\"If you want provide title\"\r\n                            initialValue={titleEmbed}\r\n                            label=\"Title\"\r\n                            name=\"titleEmbed\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea autoSize={{ minRows: 2 }} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            initialValue={urlEmbed}\r\n                            name=\"urlEmbed\"\r\n                            label=\"Youtube URL\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input />\r\n\r\n                        </Form.Item>\r\n                        Note: Add only Youtube Links (Eg:\r\n                        https://www.youtube.com/watch?v=jNQXAC9IVRw)\r\n                        {/* <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List> */}\r\n\r\n                        <Form.Item>\r\n                            <Button\r\n                                loading={this.state.loading}\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                            >\r\n                                Add/Update\r\n                            </Button>\r\n                        </Form.Item>\r\n                        <p>\r\n                            ***Update only if any changes are made, otherwise it\r\n                            may take time***\r\n                        </p>\r\n                    </Form>\r\n                </div>\r\n            );\r\n        } else if (!this.props.currentCourse.videoembed) {\r\n            console.log('SECOND FORM', this.props);\r\n            return (\r\n                <div\r\n                    style={{\r\n                        margin: '3%',\r\n                        padding: '2% ',\r\n                        border: '2px solid black',\r\n                    }}\r\n                >\r\n                    <h2>\r\n                        {this.props.currentCourse.name.toUpperCase()} : Video\r\n                        Embed\r\n                    </h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form\r\n                        onFinish={async (val) => {\r\n                            console.log('valllll', val);\r\n                            const { titleEmbed, urlEmbed } = val;\r\n                            if (urlEmbed !== '') {\r\n                                this.setState({ loading: true });\r\n                                await this.props.addVideoEmbed(\r\n                                    this.props.match.params.id,\r\n                                    titleEmbed,\r\n                                    urlEmbed\r\n                                    // this.props.currentCourse.videoembed\r\n                                );\r\n                                this.setState({ loading: false });\r\n                                console.log('abt to clear');\r\n                                this.props.clearVideoEmbed();\r\n                                console.log('abt to go back');\r\n                                this.props.history.goBack();\r\n                            } else {\r\n                                this.openNotificationWithIcon(\r\n                                    'error',\r\n                                    'Please make sure at least link is there'\r\n                                );\r\n                            }\r\n                        }}\r\n                    >\r\n                        {/*FOR ARDUINO*/}\r\n                        <Form.Item\r\n                            label=\"Title\"\r\n                            name=\"titleEmbed\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea\r\n                                autoSize={{ minRows: 2 }}\r\n                                placeholder=\"Place some title or small description\"\r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"urlEmbed\"\r\n                            label=\"Youtube URL\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input placeholder=\"Youtube video link\" />\r\n\r\n                        </Form.Item>\r\n                        Note: Add only Youtube Links (Eg:\r\n                        https://www.youtube.com/watch?v=jNQXAC9IVRw)\r\n                        <Form.Item>\r\n                            <Button\r\n                                loading={this.state.loading}\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                            >\r\n                                Add/Update\r\n                            </Button>\r\n                        </Form.Item>\r\n                        <p>\r\n                            ***Update only if any changes are made, otherwise it\r\n                            may take time***\r\n                        </p>\r\n                    </Form>\r\n                </div>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    videoembed: state.courseReducer.videoembed,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addVideoEmbed: bindActionCreators(addVideoEmbed, dispatch),\r\n    clearVideoEmbed: bindActionCreators(clearVideoEmbed, dispatch),\r\n    getVideoEmbed: bindActionCreators(getVideoEmbed, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddVideoEmbed);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { addTroubleshoot, clearTroubleshoot, getTroubleshoot } from '../action'\r\n\r\nimport { Form, Input, Button, notification } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, } from '@ant-design/icons';\r\nimport TextEditor from '../../TextEditor/text';\r\n\r\nclass AddTroubleshoot extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentCourse.troubleshoot) {\r\n            console.log(\"has troubleshoot, gotta call server\")\r\n            this.props.getTroubleshoot(this.props.currentCourse.troubleshoot)\r\n        } else {\r\n            console.log(\"does not have any troubleshoot start from the first\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearTroubleshoot()\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n    render() {\r\n\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        if (this.props.currentCourse.troubleshoot && this.props.troubleshoot) {\r\n            console.log(\"FIRST FORM\")\r\n\r\n            console.log(\"vasss\", this.props.troubleshoot)\r\n\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Troubleshoot</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.troubleshoot} onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { faqs } = val;\r\n                        if (faqs.length) {\r\n\r\n                            this.setState({ loading: true })\r\n                            await this.props.addTroubleshoot(this.props.match.params.id, faqs, this.props.currentCourse.troubleshoot)\r\n                            this.setState({ loading: false })\r\n                            console.log(\"aboutt to clear\")\r\n                            this.props.clearTroubleshoot()\r\n                            console.log(\"about to go back\")\r\n                            this.props.history.goBack()\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one FAQ is there')\r\n                        }\r\n\r\n                    }}>\r\n\r\n                        <Form.List name=\"faqs\" label=\"faqs\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Question${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'question']}\r\n                                                        fieldKey={[field.fieldKey, 'question']}\r\n                                                    // rules={[{ required: true, message: 'Missing Step Question' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Answer${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'answer']}\r\n                                                        fieldKey={[field.fieldKey, 'answer']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Answer' }]}\r\n                                                    >\r\n                                                        <TextEditor />\r\n\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </div>\r\n            )\r\n        } else if (!this.props.currentCourse.troubleshoot) {\r\n            console.log(\"SECOND FORM\")\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Troubleshoot</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { faqs } = val;\r\n\r\n                        if (faqs.length) {\r\n                            this.setState({ loading: true })\r\n                            await this.props.addTroubleshoot(this.props.match.params.id, faqs, this.props.currentCourse.troubleshoot)\r\n                            this.setState({ loading: false })\r\n                            console.log(\"abt to cler\")\r\n                            this.props.clearTroubleshoot()\r\n                            console.log(\"abt to go back\")\r\n                            this.props.history.goBack()\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n                        }\r\n\r\n\r\n                    }}>\r\n\r\n                        <Form.List name=\"faqs\" label=\"faqs\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Question${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'question']}\r\n                                                        fieldKey={[field.fieldKey, 'question']}\r\n                                                    // rules={[{ required: true, message: 'Missing Step Question' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Answer${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'answer']}\r\n                                                        fieldKey={[field.fieldKey, 'answer']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Answer' }]}\r\n\r\n                                                    >\r\n                                                        <TextEditor />\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>)\r\n        }\r\n        else {\r\n            console.log(\"ddd\")\r\n            return null;\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    troubleshoot: state.courseReducer.troubleshoot\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addTroubleshoot: bindActionCreators(addTroubleshoot, dispatch),\r\n    clearTroubleshoot: bindActionCreators(clearTroubleshoot, dispatch),\r\n    getTroubleshoot: bindActionCreators(getTroubleshoot, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTroubleshoot)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Form, Input, Button, Upload, notification, InputNumber } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport axios from \"axios\"\r\nimport imageCompression from 'browser-image-compression';\r\nimport { bindActionCreators } from 'redux';\r\nimport { addBuildCircuit, clearBuildCircuit, getBuildCircuit } from '../action';\r\nimport { baseUrl } from '../../../config';\r\n\r\nclass AddBuildCircuit extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.currentCourse.buildCircuit) {\r\n            console.log(\"has buildcircuit, gotta call server\")\r\n            await this.props.getBuildCircuit(this.props.currentCourse.buildCircuit)\r\n        } else {\r\n            console.log(\"does not ahve any buildckt astart from the first\")\r\n        }\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(pres, next) {\r\n        console.log(\"pres\", pres)\r\n        console.log(\"next\", next)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"unmounting addBuildCircuit\")\r\n        this.props.clearBuildCircuit();\r\n    }\r\n\r\n\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        console.log(\"render of add build\", this.props.buildCircuit)\r\n\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            if (e.fileList.length > 1) {\r\n                e.fileList.shift();\r\n            }\r\n            console.log(\"called\")\r\n            return e && e.fileList;\r\n        };\r\n        if (this.props.currentCourse.buildCircuit && this.props.buildCircuit) {\r\n            console.log(\"FIRST FORM\")\r\n\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Build Circuit</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.buildCircuit} onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { steps, code, codeStepStart } = val;\r\n                        let success = 1;\r\n                        if (steps?.length) {\r\n                            let newSteps = steps.map(step => {\r\n                                const { upload_image, upload_side, description } = step;\r\n                                if (upload_side && upload_side.length && upload_image[0].response && upload_image[0].response.location && upload_side[0].response && upload_side[0].response.location)\r\n                                    return {\r\n                                        description,\r\n                                        upload_image: [{\r\n                                            name: upload_image[0].name,\r\n                                            // originalFileObj: upload_image[0].originalFileObj,\r\n                                            response: upload_image[0].response,\r\n                                            status: upload_image[0].status,\r\n                                            thumbUrl: upload_image[0].thumbUrl,\r\n                                            uid: upload_image[0].uid\r\n                                        }],\r\n                                        imagePath: upload_image[0].response.location,\r\n                                        upload_side: [{\r\n                                            name: upload_side[0].name,\r\n                                            // originalFileObj: upload_side[0].originalFileObj,\r\n                                            response: upload_side[0].response,\r\n                                            status: upload_side[0].status,\r\n                                            thumbUrl: upload_side[0].thumbUrl,\r\n                                            uid: upload_side[0].uid\r\n                                        }],\r\n                                        sideImagePath: upload_image[0].response.location\r\n                                    }\r\n                                else if (upload_image[0].response && upload_image[0].response.location) {\r\n                                    return {\r\n                                        description,\r\n                                        upload_image: [{\r\n                                            name: upload_image[0].name,\r\n                                            // originalFileObj: upload_image[0].originalFileObj,\r\n                                            response: upload_image[0].response,\r\n                                            status: upload_image[0].status,\r\n                                            thumbUrl: upload_image[0].thumbUrl,\r\n                                            uid: upload_image[0].uid\r\n                                        }],\r\n                                        imagePath: upload_image[0].response.location,\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    success = 0;\r\n                                }\r\n                            }\r\n                            )\r\n                            if (success) {\r\n                                this.setState({ ans: { steps: newSteps } });\r\n                                console.log({ steps: newSteps })\r\n                                // axios.post('http://localhost:3300/course/buildCircuit', { course_id: \"5f1ef04ec0f8f301d4f0668f\", steps: newSteps })\r\n                                //     .then(res => console.log(\"hmm seems fine\"))\r\n                                //     .catch(err => console.log(\"error in adding\"))\r\n                                this.setState({ loading: true })\r\n                                await this.props.addBuildCircuit(this.props.match.params.id, newSteps, code, codeStepStart, this.props.currentCourse.buildCircuit)\r\n                                this.setState({ loading: false })\r\n                                console.log(\"abt to cler\")\r\n                                this.props.clearBuildCircuit()\r\n                                console.log(\"abt to go back\")\r\n                                this.props.history.goBack()\r\n                            }\r\n                            else {\r\n                                this.openNotificationWithIcon('error', 'Please make sure all the images have been successfully uploaded')\r\n\r\n                            }\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n\r\n                        }\r\n\r\n\r\n                    }}>\r\n\r\n                        {/*FOR ARDUINO*/}\r\n\r\n                        {this.props.match.params.type === \"arduino\" ? <Form.Item label=\"Code\" name=\"code\"\r\n                            rules={[{ required: true, message: 'Missing Code' }]}\r\n                        >\r\n                            <Input.TextArea autoSize={{ minRows: 5 }} />\r\n                        </Form.Item> : null}\r\n                        {this.props.match.params.type === \"arduino\" ? <Form.Item label=\"Code starting step\" name=\"codeStepStart\" rules={[{ required: true }]}>\r\n                            <InputNumber />\r\n                        </Form.Item> : null}\r\n\r\n\r\n                        <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        {...field}\r\n                                                        key={\"upload_image\" + index}\r\n                                                        {...formItemLayoutWithOutLabel}\r\n                                                        name={[field.name, 'upload_image']}\r\n                                                        valuePropName=\"fileList\"\r\n                                                        getValueFromEvent={normFile}\r\n                                                        fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                        rules={[{ required: true, message: 'Missing Image!' }]}\r\n                                                    >\r\n                                                        <Upload multiple={false} accept=\"image/*\"\r\n                                                            name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                const compressedFile = await imageCompression(file, options);\r\n                                                                console.log(\"before compeee\")\r\n                                                                console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                let formData = new FormData()\r\n                                                                formData.set('expId', '123')\r\n                                                                formData.append('file', compressedFile)\r\n                                                                await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                    onSuccess(res.data)\r\n                                                                    console.log(res.data)\r\n                                                                }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                            }}\r\n                                                            listType=\"picture\"\r\n                                                        >\r\n                                                            <Button>\r\n                                                                <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                        </Upload>\r\n                                                    </Form.Item>\r\n\r\n                                                    {this.props.match.params.type === \"digital\" ? (\r\n                                                        <Form.Item\r\n                                                            {...field}\r\n                                                            key={\"upload_side\" + index}\r\n                                                            {...formItemLayoutWithOutLabel}\r\n                                                            name={[field.name, 'upload_side']}\r\n                                                            valuePropName=\"fileList\"\r\n                                                            getValueFromEvent={normFile}\r\n                                                            fieldKey={[field.fieldKey, 'upload_side']}\r\n                                                        >\r\n                                                            <Upload multiple={false} accept=\"image/*\"\r\n                                                                name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                    const compressedFile = await imageCompression(file, options);\r\n                                                                    console.log(\"before compeee\")\r\n                                                                    console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                    console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                    console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                    console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                    let formData = new FormData()\r\n                                                                    formData.set('expId', '123')\r\n                                                                    formData.append('file', compressedFile)\r\n\r\n                                                                    await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                        onSuccess(res.data)\r\n                                                                        console.log(res.data)\r\n                                                                    }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                }}\r\n                                                                listType=\"picture\"\r\n                                                            >\r\n                                                                <Button>\r\n                                                                    <UploadOutlined /> Upload Side Image (if any)\r\n                                                        </Button>\r\n                                                            </Upload>\r\n                                                        </Form.Item>\r\n                                                    ) : null}\r\n\r\n\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                        <p>***Update only if any changes are made, otherwise it may take time***</p>\r\n\r\n                    </Form>\r\n                </div>\r\n            )\r\n        }\r\n        else if (!this.props.currentCourse.buildCircuit) {\r\n            console.log(\"SECOND FORM\")\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Build Circuit</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { steps, code, codeStepStart } = val;\r\n                        let success = 1;\r\n                        if (steps?.length) {\r\n                            let newSteps = steps.map(step => {\r\n                                const { upload_image, upload_side, description } = step;\r\n                                if (upload_side && upload_side.length && upload_image[0].response && upload_image[0].response.location && upload_side[0].response && upload_side[0].response.location)\r\n                                    return {\r\n                                        description,\r\n                                        upload_image: [{\r\n                                            name: upload_image[0].name,\r\n                                            // originalFileObj: upload_image[0].originalFileObj,\r\n                                            response: upload_image[0].response,\r\n                                            status: upload_image[0].status,\r\n                                            thumbUrl: upload_image[0].thumbUrl,\r\n                                            uid: upload_image[0].uid\r\n                                        }],\r\n                                        imagePath: upload_image[0].response.location,\r\n                                        upload_side: [{\r\n                                            name: upload_side[0].name,\r\n                                            // originalFileObj: upload_side[0].originalFileObj,\r\n                                            response: upload_side[0].response,\r\n                                            status: upload_side[0].status,\r\n                                            thumbUrl: upload_side[0].thumbUrl,\r\n                                            uid: upload_side[0].uid\r\n                                        }],\r\n                                        sideImagePath: upload_image[0].response.location\r\n                                    }\r\n                                else if (upload_image[0].response && upload_image[0].response.location) {\r\n                                    return {\r\n                                        description,\r\n                                        upload_image: [{\r\n                                            name: upload_image[0].name,\r\n                                            // originalFileObj: upload_image[0].originalFileObj,\r\n                                            response: upload_image[0].response,\r\n                                            status: upload_image[0].status,\r\n                                            thumbUrl: upload_image[0].thumbUrl,\r\n                                            uid: upload_image[0].uid\r\n                                        }],\r\n                                        imagePath: upload_image[0].response.location,\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    success = 0;\r\n                                }\r\n                            }\r\n                            )\r\n                            if (success) {\r\n                                this.setState({ ans: { steps: newSteps } });\r\n                                console.log({ steps: newSteps })\r\n                                // axios.post('http://localhost:3300/course/buildCircuit', { course_id: \"5f1ef04ec0f8f301d4f0668f\", steps: newSteps })\r\n                                //     .then(res => console.log(\"hmm seems fine\"))\r\n                                //     .catch(err => console.log(\"error in adding\"))\r\n                                this.setState({ loading: true })\r\n                                await this.props.addBuildCircuit(this.props.match.params.id, newSteps, code, codeStepStart, this.props.currentCourse.buildCircuit)\r\n                                this.setState({ loading: false })\r\n                                console.log(\"abt to cler\")\r\n                                this.props.clearBuildCircuit()\r\n                                console.log(\"abt to go back\")\r\n                                this.props.history.goBack()\r\n                            }\r\n                            else {\r\n                                this.openNotificationWithIcon('error', 'Please make sure all the images have been successfully uploaded')\r\n\r\n                            }\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n\r\n                        }\r\n\r\n\r\n                    }}>\r\n\r\n\r\n                        {/*FOR ARDUINO*/}\r\n\r\n                        {this.props.match.params.type === \"arduino\" ? <Form.Item label=\"Code\" name=\"code\"\r\n                            rules={[{ required: true, message: 'Missing Code' }]}\r\n                        >\r\n                            <Input.TextArea autoSize={{ minRows: 5 }} />\r\n                        </Form.Item> : null}\r\n\r\n                        {this.props.match.params.type === \"arduino\" ? <Form.Item label=\"Code starting step\" name=\"codeStepStart\" rules={[{ required: true }]}>\r\n                            <InputNumber />\r\n                        </Form.Item> : null}\r\n\r\n\r\n\r\n\r\n\r\n                        <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        {...field}\r\n                                                        key={\"upload_image\" + index}\r\n                                                        {...formItemLayoutWithOutLabel}\r\n                                                        name={[field.name, 'upload_image']}\r\n                                                        valuePropName=\"fileList\"\r\n                                                        getValueFromEvent={normFile}\r\n                                                        fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                        rules={[{ required: true, message: 'Missing Image!' }]}\r\n                                                    >\r\n                                                        <Upload multiple={false} accept=\"image/*\"\r\n                                                            name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                const compressedFile = await imageCompression(file, options);\r\n                                                                console.log(\"before compeee\")\r\n                                                                console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                let formData = new FormData()\r\n                                                                formData.set('expId', '123')\r\n                                                                formData.append('file', compressedFile)\r\n                                                                await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                    onSuccess(res.data)\r\n                                                                    console.log(res.data)\r\n                                                                }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                            }}\r\n                                                            listType=\"picture\"\r\n                                                        >\r\n                                                            <Button>\r\n                                                                <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                        </Upload>\r\n                                                    </Form.Item>\r\n                                                    {this.props.match.params.type === \"digital\" ? (\r\n                                                        <Form.Item\r\n                                                            {...field}\r\n                                                            key={\"upload_side\" + index}\r\n                                                            {...formItemLayoutWithOutLabel}\r\n                                                            name={[field.name, 'upload_side']}\r\n                                                            valuePropName=\"fileList\"\r\n                                                            getValueFromEvent={normFile}\r\n                                                            fieldKey={[field.fieldKey, 'upload_side']}\r\n                                                        >\r\n                                                            <Upload multiple={false} accept=\"image/**\"\r\n                                                                name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                    const compressedFile = await imageCompression(file, options);\r\n                                                                    console.log(\"before compeee\")\r\n                                                                    console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                    console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                    console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                    console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                    let formData = new FormData()\r\n                                                                    formData.set('expId', '123')\r\n                                                                    formData.append('file', compressedFile)\r\n                                                                    await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                        onSuccess(res.data)\r\n                                                                        console.log(res.data)\r\n                                                                    }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                }}\r\n                                                                listType=\"picture\"\r\n                                                            >\r\n                                                                <Button>\r\n                                                                    <UploadOutlined /> Upload Side Image (if any)\r\n                                                        </Button>\r\n                                                            </Upload>\r\n                                                        </Form.Item>\r\n                                                    ) : null}\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                        <p>***Update only if any changes are made, otherwise it may take time***</p>\r\n                    </Form>\r\n                </div>)\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    buildCircuit: state.courseReducer.buildCircuit\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addBuildCircuit: bindActionCreators(addBuildCircuit, dispatch),\r\n    clearBuildCircuit: bindActionCreators(clearBuildCircuit, dispatch),\r\n    getBuildCircuit: bindActionCreators(getBuildCircuit, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddBuildCircuit)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TextEditor from '../../TextEditor'\r\nimport { bindActionCreators } from 'redux'\r\nimport axios from 'axios'\r\nimport { uuid } from 'uuidv4'\r\nimport './index.scss'\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    Modal,\r\n    InputNumber,\r\n    notification,\r\n    Switch,\r\n    Upload\r\n} from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { addExperimentForm } from '../action'\r\nimport { baseUrl } from '../../../config'\r\n\r\nclass AddExperimentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            inputModal: false,\r\n            textareaModal: false,\r\n            numberModal: false,\r\n            checkboxModal: false,\r\n            radioModal: false,\r\n            switchModal: false,\r\n            checkboxgroupModal: false,\r\n            headingModal: false,\r\n            textModal: false,\r\n            tableModal: false,\r\n            uploadModal: false,\r\n            texteditormodal: false,\r\n            tempTable: [],\r\n            tempValue: '',\r\n            tempTableID: '',\r\n\r\n            questions: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.props.currentCourse) {\r\n            console.log(\"has , gotta call server\")\r\n            // this.props.getExperimentForm(this.props.currentCourse.experiment)\r\n            axios.get(`${baseUrl}/api/course/experimentForm/get/${this.props.match.params.expId}`)\r\n                .then(res => res.data)\r\n                .then(expForm => {\r\n                    if (expForm.form) {\r\n                        this.setState({ questions: expForm.form.formContent })\r\n                    }\r\n                })\r\n                .catch(err => console.log(\"error in getting exp form\"))\r\n        } else {\r\n            console.log(\"does not ahve any introduction astart from the first\")\r\n        }\r\n    }\r\n\r\n\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n    handleAddInput = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"input\", required: required ? true : false, name: label, label: label }],\r\n                inputModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddTextarea = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"textarea\", required: required ? true : false, name: label, label: label }],\r\n                textareaModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAddTextEditor = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"texteditor\", required: required ? true : false, name: label, label: label }],\r\n                texteditorModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAddNumber = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"number\", required: required ? true : false, name: label, label: label }],\r\n                numberModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckbox = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"checkbox\", name: label, label: label }],\r\n                checkboxModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddText = ({ label }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"text\", name: label, label: label }],\r\n                textModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddHeading = ({ label, type }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"heading\", name: label, label: type }],\r\n                headingModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddSwitch = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"switch\", name: label, label: label }],\r\n                switchModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckboxgroup = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { id: uuid(), type: \"checkboxgroup\", name: label, required: required ? true : false, label: label, values: values }],\r\n                    checkboxgroupModal: false\r\n                }\r\n            })\r\n    }\r\n    handleAddRadio = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { id: uuid(), type: \"radio\", name: label, required: required ? true : false, label: label, values: values }],\r\n                    radioModal: false\r\n                }\r\n            })\r\n    }\r\n\r\n    handelAddTruthTable = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, ...this.state.tempTable],\r\n                tempTable: [],\r\n                tableModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAddUpload = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"upload\", required: required, name: label, label: label }],\r\n                uploadModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    submitForm = async () => {\r\n        if (this.state.questions.length) {\r\n            console.log(this.state.questions)\r\n            this.setState({ loading: true })\r\n            await this.props.addExperimentForm(this.props.match.params.id, this.state.questions, this.props.match.params.expId)\r\n            this.setState({ loading: false })\r\n            this.props.history.goBack()\r\n        }\r\n    }\r\n\r\n    handleDeleteItem = (delId) => {\r\n        console.log(\"CURRENT\", this.state.questions)\r\n        const new_questions = this.state.questions.filter(question => {\r\n            return !(question._id == delId || question.id == delId)\r\n        })\r\n        console.log(\"UPDATED\", new_questions)\r\n        this.setState({\r\n            questions: [...new_questions]\r\n        })\r\n    }\r\n\r\n    handleDeleteTable = (delId) => {\r\n        console.log(\"CURRENT\", this.state.questions)\r\n        const new_questions = this.state.questions.filter(question => {\r\n            return question.tableID !== delId\r\n        })\r\n        console.log(\"UPDATED\", new_questions)\r\n        this.setState({\r\n            questions: new_questions\r\n        })\r\n    }\r\n\r\n    handleStartTruthTable = () => {\r\n        let tempTabID = uuid()\r\n        this.setState({\r\n            tableModal: true,\r\n            tempTableID: tempTabID\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 4 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 20 },\r\n            },\r\n        };\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 4 },\r\n            },\r\n        };\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            return e && e.fileList;\r\n        };\r\n\r\n\r\n        return (\r\n            <div className=\"form-builder\" style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                <div className=\"preview-form\" >\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Experiment Form</h2>\r\n                    <br />\r\n                    <h2>Live Preview</h2>\r\n                    <Form onFinish={(values) => { console.log(values, this.state.questions) }}>\r\n\r\n                        {\r\n                            this.state.questions.map((field, index) => {\r\n                                const { type, name, label, required } = field;\r\n\r\n                                switch (type) {\r\n                                    case 'input': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <Input />\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'textarea': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <Input.TextArea autoSize={{ minRows: 3, maxRows: 100 }} />\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'texteditor': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <TextEditor />\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'number': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <InputNumber />\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'checkbox': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item name={name} valuePropName=\"checked\" label={label} initialValue={false} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <Checkbox></Checkbox>\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'radio': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <Radio.Group>\r\n                                                    {field.values.map(rad =>\r\n                                                        <Radio value={rad}>{rad}</Radio>)}\r\n                                                </Radio.Group>\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'switch': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item name=\"switch\" label=\"Switch\" valuePropName=\"checked\" className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'text': {\r\n                                        console.log(label)\r\n                                        return (\r\n                                            <div className=\"no-label\">\r\n\r\n                                                <Form.Item className=\"adm-ard-result-form-item\">\r\n                                                    <div dangerouslySetInnerHTML={{\r\n                                                        __html:\r\n                                                            label,\r\n                                                    }}></div>\r\n                                                    <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div>\r\n                                                    <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                        className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                </Form.Item>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'heading': {\r\n                                        return (\r\n                                            <Form.Item className=\"adm-ard-result-form-item\">\r\n                                                {label === 'h1' ? <h1>{name}</h1> : label === 'h2' ? <h2>{name}</h2> : label === 'h3' ? <h3>{name}</h3> : label === 'h4' ? <h4>{name}</h4> : label === 'h5' ? <h5>{name}</h5> : <h6>{name}</h6>}\r\n                                                {/* <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div> */}\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'checkboxgroup': {\r\n                                        return (\r\n                                            <div className=\"no-label\">\r\n                                                <Form.Item label={label} name={name} rules={[\r\n                                                    { required: required }\r\n                                                ]} className=\"adm-ard-result-form-item\">\r\n                                                    <div dangerouslySetInnerHTML={{\r\n                                                        __html:\r\n                                                            label,\r\n                                                    }}></div>\r\n                                                    <Checkbox.Group>\r\n                                                        {field.values.map(check =>\r\n                                                            <Checkbox value={check}>{check}</Checkbox>)}\r\n                                                    </Checkbox.Group>\r\n                                                    <br />\r\n                                                    <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                        className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                </Form.Item>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'row': {\r\n                                        return (\r\n                                            <div className=\"adm-ard-result-form-item\">\r\n                                                <div className=\"truth-table-row\">\r\n                                                    {field.values.map(value => {\r\n                                                        if (value.startsWith('_switch_')) {\r\n                                                            return (\r\n                                                                <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                                    <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                                                </Form.Item>\r\n\r\n                                                            )\r\n                                                            {/* <Form.Item>\r\n                                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                            </Form.Item> */}\r\n                                                        }\r\n                                                        else {\r\n                                                            return (\r\n                                                                <Form.Item >\r\n                                                                    <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                                </Form.Item>\r\n                                                            )\r\n                                                        }\r\n                                                    })}\r\n                                                </div>\r\n                                                {\r\n                                                    index == this.state.questions.length - 1 &&\r\n                                                    <>\r\n                                                        <Button danger onClick={() => { this.handleDeleteTable(field.tableID) }}\r\n                                                            className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                    </>\r\n                                                }\r\n                                                {\r\n                                                    index != this.state.questions.length - 1 &&\r\n                                                    this.state.questions[index + 1].type != \"row\" &&\r\n                                                    <>\r\n                                                        <Button danger onClick={() => { this.handleDeleteTable(field.tableID) }}\r\n                                                            className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                    </>\r\n                                                }\r\n                                                {\r\n                                                    index != this.state.questions.length - 1 &&\r\n                                                    this.state.questions[index + 1].type == \"row\" &&\r\n                                                    this.state.questions[index + 1].tableID != field.tableID &&\r\n                                                    <>\r\n                                                        <Button danger onClick={() => { this.handleDeleteTable(field.tableID) }}\r\n                                                            className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                    </>\r\n                                                }\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n\r\n                                    case 'upload': {\r\n                                        return (\r\n                                            <div className=\"no-label\">\r\n                                                <Form.Item name={name} label={label} valuePropName=\"fileList\" getValueFromEvent={normFile} rules={[\r\n                                                    { required: required }]} className=\"adm-ard-result-form-item\">\r\n                                                    <div dangerouslySetInnerHTML={{\r\n                                                        __html:\r\n                                                            label,\r\n                                                    }}></div>\r\n                                                    <Upload>\r\n                                                        <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                                                    </Upload>\r\n                                                    <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                        className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                </Form.Item>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    default: return null\r\n                                }\r\n                            })\r\n                        }\r\n                        {/* <Form.Item >\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Submit\r\n                </Button>\r\n                        </Form.Item> */}\r\n                    </Form>\r\n                </div>\r\n                <div className=\"form-tools\">\r\n                    <Button type=\"primary\" onClick={this.submitForm}>Save Form</Button>\r\n                    <Button danger onClick={() => this.setState({ questions: [] })}>Delete Form</Button>\r\n                    <Button onClick={() => this.setState({ inputModal: true })}>Input</Button>\r\n                    <Button onClick={() => this.setState({ textareaModal: true })}>Text Area</Button>\r\n                    <Button onClick={() => this.setState({ texteditorModal: true })}>Text Editor(for images)</Button>\r\n                    <Button onClick={() => this.setState({ numberModal: true })}>Input Number</Button>\r\n                    <Button onClick={() => this.setState({ checkboxModal: true })}>Checkbox</Button>\r\n                    <Button onClick={() => this.setState({ checkboxgroupModal: true })}>Checkbox Group</Button>\r\n                    <Button onClick={() => this.setState({ radioModal: true })}>Radio</Button>\r\n                    <Button onClick={() => this.setState({ switchModal: true })}>Switch</Button>\r\n                    <Button onClick={() => this.setState({ textModal: true })}>Text</Button>\r\n                    <Button onClick={() => this.setState({ headingModal: true })}>Heading</Button>\r\n                    <Button onClick={() => this.setState({ tableModal: true })}>Table</Button>\r\n                    <Button onClick={() => this.setState({ uploadModal: true })}>Upload</Button>\r\n\r\n\r\n\r\n                </div>\r\n                <Modal\r\n                    visible={this.state.inputModal}\r\n                    title=\"Input\"\r\n                    onCancel={() => this.setState({ inputModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddInput}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textareaModal}\r\n                    title=\"Text Area\"\r\n                    onCancel={() => this.setState({ textareaModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddTextarea}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.texteditorModal}\r\n                    title=\"Text Area\"\r\n                    onCancel={() => this.setState({ texteditorModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddTextEditor}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.numberModal}\r\n                    title=\"Number\"\r\n                    onCancel={() => this.setState({ numberModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddNumber}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxModal}\r\n                    title=\"Check Box\"\r\n                    onCancel={() => this.setState({ checkboxModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckbox}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.switchModal}\r\n                    title=\"Switch\"\r\n                    onCancel={() => this.setState({ switchModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddSwitch}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textModal}\r\n                    title=\"Text\"\r\n                    onCancel={() => this.setState({ textModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddText}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.headingModal}\r\n                    title=\"Heading\"\r\n                    onCancel={() => this.setState({ headingModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddHeading}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <p>*The greater the number , smaller the heading</p>\r\n                        <Form.Item\r\n                            label=\"Heading type\"\r\n                            name=\"type\"\r\n                            rules={[{ required: true }]}>\r\n                            <Radio.Group>\r\n                                <Radio value={'h1'}>h1</Radio>\r\n                                <Radio value={'h2'}>h2</Radio>\r\n                                <Radio value={'h3'}>h3</Radio>\r\n                                <Radio value={'h4'}>h4</Radio>\r\n                                <Radio value={'h5'}>h5</Radio>\r\n                                <Radio value={'h6'}>h6</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxgroupModal}\r\n                    title=\"CheckBox Group\"\r\n                    onCancel={() => this.setState({ checkboxgroupModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckboxgroup}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                                            </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.radioModal}\r\n                    title=\"Radio\"\r\n                    onCancel={() => this.setState({ radioModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddRadio}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                                            </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.tableModal}\r\n                    title=\"Table\"\r\n                    onCancel={() => this.setState({ tableModal: false, tempValue: '', tempTable: [], tempTableID: '' })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handelAddTruthTable}>\r\n\r\n                        <Button onClick={() => this.setState({ headingModal: true })}>Add Heading?</Button>\r\n                        <Form.Item\r\n                            label=\"Value\"\r\n                        >\r\n                            <Input value={this.state.tempValue} onChange={(e) => { this.setState({ tempValue: e.target.value }) }} style={{ width: \"150px\" }} />\r\n                        </Form.Item>\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue, tempTableID } = this.state\r\n                                if (tempValue) {\r\n                                    if (tempTable.length) {\r\n                                        tempTable[tempTable.length - 1].values.push(tempValue)\r\n                                    }\r\n                                    else {\r\n                                        tempTable.push({\r\n                                            type: \"row\",\r\n                                            values: [tempValue],\r\n                                            tableID: tempTableID\r\n                                        })\r\n                                    }\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: ''\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the default value')\r\n                            }}>Add Box</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue, tempTableID } = this.state\r\n                                if (tempValue) {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [tempValue],\r\n                                        tableID: tempTableID\r\n                                    })\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: \"\"\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the defult value')\r\n                            }}>Add Box in next row</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempTableID } = this.state\r\n                                if (tempTable.length) {\r\n                                    tempTable[tempTable.length - 1].values.push(\"_switch_\" + uuid())\r\n                                }\r\n                                else {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [\"_switch_\" + uuid()],\r\n                                        tableID: tempTableID\r\n                                    })\r\n                                }\r\n                                this.setState(\r\n                                    {\r\n                                        tempTable\r\n                                    }\r\n                                )\r\n                            }}>Add user switch</Button>\r\n                        </div>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" onClick={() => this.setState({ tempTableID: '' })}>Confirm</Button>\r\n                        </Form.Item>\r\n                        <h3>Table Preview</h3>\r\n                        <Form>{this.state.tempTable.map(row => (\r\n                            <div className=\"truth-table-row\">\r\n                                {row.values.map(value => {\r\n                                    if (value.startsWith('_switch_')) {\r\n                                        return (\r\n                                            <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                    else {\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                        ))}</Form>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    visible={this.state.uploadModal}\r\n                    title=\"Upload\"\r\n                    onCancel={() => this.setState({ uploadModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddUpload}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addExperimentForm: bindActionCreators(addExperimentForm, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddExperimentForm)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TextEditor from '../../TextEditor'\r\nimport { bindActionCreators } from 'redux'\r\nimport { Input, Form, Button, notification, Upload, Checkbox } from 'antd'\r\nimport { addExcercise, clearExcercise, getExcercise } from '../action'\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport axios from \"axios\"\r\nimport imageCompression from 'browser-image-compression';\r\n\r\nimport { baseUrl } from '../../../config';\r\n\r\nclass AddExcercise extends Component {\r\n\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentCourse.excercise) {\r\n            console.log(\"has excercise, gotta call server\")\r\n            this.props.getExcercise(this.props.currentCourse.excercise)\r\n        } else {\r\n            console.log(\"does not ahve any excercise astart from the first\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearExcercise();\r\n    }\r\n\r\n    render() {\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n\r\n        console.log(\"in render\")\r\n        console.log(this.props.currentCourse)\r\n\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            return e && e.fileList;\r\n        };\r\n\r\n        if (this.props.currentCourse.excercise && this.props.excercise) {\r\n            console.log(\"FIRST FORM\")\r\n\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Excercise</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.excercise} onFinish={async (val) => {\r\n                        const { excercise_list, excerciseFiles } = val;\r\n                        console.log(excercise_list);\r\n                        let newExcerciseFiles = []\r\n                        let excerciseFilePaths = []\r\n                        if (excerciseFiles) {\r\n                            newExcerciseFiles = excerciseFiles.map(file => ({\r\n                                name: file.name,\r\n                                response: file.response,\r\n                                uid: file.uid,\r\n                                status: file.status,\r\n                            }))\r\n\r\n                            excerciseFilePaths = excerciseFiles.map(file => (\r\n                                file.response.location\r\n                            ))\r\n                        }\r\n\r\n                        console.log(\"files\", newExcerciseFiles)\r\n                        console.log(\"paths\", excerciseFilePaths)\r\n                        if (excercise_list.length) {\r\n                            this.setState({ loading: true })\r\n                            await this.props.addExcercise(this.props.match.params.id, excercise_list, newExcerciseFiles, excerciseFilePaths, this.props.currentCourse.excercise)\r\n                            this.setState({ loading: false })\r\n                            this.props.clearExcercise()\r\n                            this.props.history.goBack()\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n                        }\r\n                    }}>\r\n                        <Form.Item\r\n                            valuePropName=\"fileList\"\r\n                            name=\"excerciseFiles\"\r\n                            getValueFromEvent={normFile}\r\n                        >\r\n                            <Upload multiple={false}\r\n                                name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                    let formData = new FormData()\r\n                                    formData.set('expId', '123')\r\n                                    formData.append('file', file)\r\n\r\n                                    await axios.post(`${baseUrl}/api/upload/excercise`, formData).then(res => {\r\n                                        onSuccess(res.data)\r\n                                        console.log(res.data)\r\n                                    }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                }}\r\n                            // listType=\"picture\"\r\n                            >\r\n                                <Button>\r\n                                    <UploadOutlined /> Upload Files(Optional)\r\n                                </Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                        <Form.List name=\"excercise_list\" label=\"excercise_list\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Question${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'question']}\r\n                                                        fieldKey={[field.fieldKey, 'question']}\r\n                                                        rules={[{ required: true, message: 'Missing Question' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Hint${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc-hint\" + index}\r\n                                                        name={[field.name, 'hint']}\r\n                                                        fieldKey={[field.fieldKey, 'hint']}\r\n                                                    // rules={[{ required: true, message: 'Missing Hint' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Upload Needed? `}\r\n                                                        {...field}\r\n                                                        key={\"desc-isUpload\" + index}\r\n                                                        name={[field.name, 'isUpload']}\r\n                                                        fieldKey={[field.fieldKey, 'isUpload']}\r\n                                                        valuePropName=\"checked\"\r\n                                                        initialValue={false}\r\n\r\n                                                    >\r\n                                                        <Checkbox />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Code Needed ?`}\r\n                                                        {...field}\r\n                                                        key={\"desc-isCode\" + index}\r\n                                                        name={[field.name, 'isCode']}\r\n                                                        fieldKey={[field.fieldKey, 'isCode']}\r\n                                                        valuePropName=\"checked\"\r\n                                                        initialValue={false}\r\n\r\n                                                    >\r\n                                                        <Checkbox />\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </div>\r\n            )\r\n        } else if (!this.props.currentCourse.excercise) {\r\n            console.log(\"SECOND FORM\")\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Excercise</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { excercise_list, excerciseFiles } = val;\r\n                        // console.log(\"list\", excercise_list)\r\n                        // console.log(\"files\", excerciseFiles)\r\n                        let newExcerciseFiles = []\r\n                        let excerciseFilePaths = []\r\n                        if (excerciseFiles) {\r\n                            newExcerciseFiles = excerciseFiles.map(file => ({\r\n                                name: file.name,\r\n                                response: file.response,\r\n                                uid: file.uid,\r\n                                status: file.status,\r\n                            }))\r\n\r\n                            excerciseFilePaths = excerciseFiles.map(file => (\r\n                                file.response.location\r\n                            ))\r\n                        }\r\n\r\n                        console.log(\"files\", newExcerciseFiles)\r\n                        console.log(\"paths\", excerciseFilePaths)\r\n\r\n                        if (excercise_list?.length) {\r\n\r\n                            this.setState({ loading: true })\r\n                            await this.props.addExcercise(this.props.match.params.id, excercise_list, newExcerciseFiles, excerciseFilePaths, this.props.currentCourse.excercise)\r\n                            this.setState({ loading: false })\r\n                            this.props.clearExcercise()\r\n                            this.props.history.goBack()\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n\r\n                        }\r\n\r\n\r\n                    }}>\r\n\r\n                        <Form.Item\r\n                            valuePropName=\"fileList\"\r\n                            name=\"excerciseFiles\"\r\n                            getValueFromEvent={normFile}\r\n                        >\r\n                            <Upload multiple={false}\r\n                                name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                    let formData = new FormData()\r\n                                    formData.set('expId', '123')\r\n                                    formData.append('file', file)\r\n\r\n                                    await axios.post(`${baseUrl}/api/upload/excercise`, formData).then(res => {\r\n                                        onSuccess(res.data)\r\n                                        console.log(res.data)\r\n                                    }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                }}\r\n                            // listType=\"picture\"\r\n                            >\r\n                                <Button>\r\n                                    <UploadOutlined /> Upload Files(Optional)\r\n                                </Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                        <Form.List name=\"excercise_list\" label=\"excercise_list\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Question${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc-question\" + index}\r\n                                                        name={[field.name, 'question']}\r\n                                                        fieldKey={[field.fieldKey, 'question']}\r\n                                                        rules={[{ required: true, message: 'Missing Question' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Hint${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc-hint\" + index}\r\n                                                        name={[field.name, 'hint']}\r\n                                                        fieldKey={[field.fieldKey, 'hint']}\r\n                                                    // rules={[{ required: true, message: 'Missing hint' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Upload Needed ?`}\r\n                                                        {...field}\r\n                                                        key={\"desc-isUpload\" + index}\r\n                                                        name={[field.name, 'isUpload']}\r\n                                                        fieldKey={[field.fieldKey, 'isUpload']}\r\n                                                        valuePropName=\"checked\"\r\n                                                        initialValue={false}\r\n\r\n                                                    >\r\n                                                        <Checkbox />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Code Needed ?`}\r\n                                                        {...field}\r\n                                                        key={\"desc-isCode\" + index}\r\n                                                        name={[field.name, 'isCode']}\r\n                                                        fieldKey={[field.fieldKey, 'isCode']}\r\n                                                        valuePropName=\"checked\"\r\n                                                        initialValue={false}\r\n\r\n\r\n                                                    >\r\n                                                        <Checkbox />\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>)\r\n        }\r\n        else {\r\n            console.log(\"DSadasd\")\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    excercise: state.courseReducer.excercise\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getExcercise: bindActionCreators(getExcercise, dispatch),\r\n    addExcercise: bindActionCreators(addExcercise, dispatch),\r\n    clearExcercise: bindActionCreators(clearExcercise, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddExcercise)","import { Card, Layout, Menu } from 'antd';\r\nimport React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { COURSE } from \"../../config\"\r\nimport './index.scss';\r\n// import SignUpForm from \"../Auth\"\r\n\r\nclass CreatorHome extends React.Component {\r\n    constructor() {\r\n        super()\r\n    }\r\n    render() {\r\n        return (\r\n            // <div className=\"client-mainHome-container\" style={{ backgroundColor: \"#001A2F\", height: \"100vh\", alignItems: \"center\" }}>\r\n            <Layout style={{ backgroundColor: \"#001A2F\" }}>\r\n                {/* <SignUpForm/> */}\r\n                <div className=\"client-mainHome-container\" style={{ backgroundColor: \"#001A2F\", minHeight: \"calc( 100vh - 46px )\", alignItems: \"center\" }}>\r\n                    <h1 style={{ color: \"white\", fontWeight: \"bolder\", fontSize: \"48px\" }} className=\"lineContainer\">CREATOR HOME</h1>\r\n                    <Link to=\"/admin/arduino\" className=\"client-mainHome-link\" style={{ borderRadius: 15 }}>\r\n                        <Card\r\n                            bordered={false}\r\n                            hoverable\r\n                            cover={<img alt=\"example\" src=\"https://a.pololu-files.com/picture/0J7808.1200.jpg?8a7bee07ca7ffbb11e11f74e99f5c3a9\" />}\r\n                            style={{ backgroundColor: \"rgba(130, 199, 254, 0.2)\", borderRadius: 15 }}\r\n                        >\r\n                            <p style={{ color: \"white\", margin: 0, textAlign: \"center\" }}>ARDUINO</p>\r\n                        </Card>\r\n                    </Link>\r\n\r\n                    <Link to=\"/admin/digital\" className=\"client-mainHome-link\" style={{ borderRadius: 15 }}>\r\n                        <Card\r\n                            bordered={false}\r\n                            hoverable\r\n                            cover={<img alt=\"example\" src=\"https://www.ie.edu/insights/wp-content/uploads/2017/05/Prueba-y-aprendizaje-transformacion-cultural-en-la-era-digital.jpg\" />}\r\n                            style={{ backgroundColor: \"rgba(130, 199, 254, 0.2)\", borderRadius: 15 }}\r\n                        >\r\n                            <p style={{ color: \"white\", margin: 0, textAlign: \"center\" }}>DIGITAL</p>\r\n                        </Card>\r\n                    </Link>\r\n                </div>\r\n            </Layout >\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreatorHome","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TextEditor from '../../TextEditor/text'\r\nimport { bindActionCreators } from 'redux'\r\nimport axios from 'axios'\r\nimport { uuid } from 'uuidv4'\r\nimport './index.scss'\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    Modal,\r\n    InputNumber,\r\n    notification,\r\n    Switch,\r\n    Upload\r\n} from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { addResults } from '../action'\r\nimport { baseUrl } from '../../../config'\r\n\r\nclass AddResults extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            inputModal: false,\r\n            textareaModal: false,\r\n            numberModal: false,\r\n            checkboxModal: false,\r\n            radioModal: false,\r\n            switchModal: false,\r\n            checkboxgroupModal: false,\r\n            headingModal: false,\r\n            textModal: false,\r\n            tableModal: false,\r\n            uploadModal: false,\r\n            texteditormodal: false,\r\n            tempTable: [],\r\n            tempValue: '',\r\n            tempTableID: '',\r\n\r\n            questions: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.props.currentCourse.results) {\r\n            console.log(\"has , gotta call server\")\r\n            // this.props.getExperimentForm(this.props.currentCourse.experiment)\r\n            axios.get(`${baseUrl}/api/course/results/get/${this.props.currentCourse.results}`)\r\n                .then(res => res.data)\r\n                .then(results => {\r\n                    if (results.results) {\r\n                        this.setState({ questions: results.results.formContent })\r\n                    }\r\n                })\r\n                .catch(err => console.log(\"error in getting results form\"))\r\n        } else {\r\n            console.log(\"does not ahve any introduction astart from the first\")\r\n        }\r\n    }\r\n\r\n\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n    handleAddInput = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"input\", required: required ? true : false, name: label, label: label }],\r\n                inputModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddTextarea = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"textarea\", required: required ? true : false, name: label, label: label }],\r\n                textareaModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAddTextEditor = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"texteditor\", required: required ? true : false, name: label, label: label }],\r\n                texteditorModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAddNumber = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"number\", required: required ? true : false, name: label, label: label }],\r\n                numberModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckbox = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"checkbox\", name: label, label: label }],\r\n                checkboxModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddText = ({ label }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"text\", name: label, label: label }],\r\n                textModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddHeading = ({ label, type }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"heading\", name: label, label: type }],\r\n                headingModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddSwitch = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"switch\", name: label, label: label }],\r\n                switchModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckboxgroup = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { id: uuid(), type: \"checkboxgroup\", name: label, required: required ? true : false, label: label, values: values }],\r\n                    checkboxgroupModal: false\r\n                }\r\n            })\r\n    }\r\n    handleAddRadio = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { id: uuid(), type: \"radio\", name: label, required: required ? true : false, label: label, values: values }],\r\n                    radioModal: false\r\n                }\r\n            })\r\n    }\r\n\r\n    handelAddTruthTable = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, ...this.state.tempTable],\r\n                tempTable: [],\r\n                tableModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAddUpload = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { id: uuid(), type: \"upload\", required: required, name: label, label: label }],\r\n                uploadModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    submitForm = async () => {\r\n        if (this.state.questions.length) {\r\n            console.log(this.state.questions)\r\n            this.setState({ loading: true })\r\n            await this.props.addResults(this.props.match.params.id, this.state.questions, this.props.currentCourse.results)\r\n            this.setState({ loading: false })\r\n            this.props.history.goBack()\r\n        }\r\n    }\r\n\r\n    handleDeleteItem = (delId) => {\r\n        const new_questions = this.state.questions.filter(question => {\r\n            return !(question._id == delId || question.id == delId)\r\n        })\r\n        this.setState({\r\n            questions: [...new_questions]\r\n        })\r\n    }\r\n\r\n    handleDeleteTable = (delId) => {\r\n        const new_questions = this.state.questions.filter(question => {\r\n            return question.tableID !== delId\r\n        })\r\n        this.setState({\r\n            questions: new_questions\r\n        })\r\n    }\r\n\r\n    handleStartTruthTable = () => {\r\n        let tempTabID = uuid()\r\n        this.setState({\r\n            tableModal: true,\r\n            tempTableID: tempTabID\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 4 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 20 },\r\n            },\r\n        };\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 4 },\r\n            },\r\n        };\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            return e && e.fileList;\r\n        };\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"form-builder\" style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                <div className=\"preview-form\" >\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Results And Analysis </h2>\r\n                    <br />\r\n                    <h2>Live Preview</h2>\r\n                    <Form layout=\"vertical\" onFinish={(values) => { console.log(values, this.state.questions) }}>\r\n\r\n                        {\r\n                            this.state.questions.map((field, index) => {\r\n                                const { type, name, label, required } = field;\r\n\r\n                                switch (type) {\r\n                                    case 'input': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <Input />\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n\r\n                                    )\r\n                                        break;\r\n                                    case 'textarea': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <Input.TextArea autoSize={{ minRows: 3, maxRows: 100 }} />\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'texteditor': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <TextEditor />\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'number': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <InputNumber />\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'checkbox': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item name={name} valuePropName=\"checked\" label={label} initialValue={false} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <Checkbox></Checkbox>\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'radio': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]} className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <Radio.Group>\r\n                                                    {field.values.map(rad =>\r\n                                                        <Radio value={rad}>{rad}</Radio>)}\r\n                                                </Radio.Group>\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'switch': return (\r\n                                        <div className=\"no-label\">\r\n                                            <Form.Item name=\"switch\" label=\"Switch\" valuePropName=\"checked\" className=\"adm-ard-result-form-item\">\r\n                                                <div dangerouslySetInnerHTML={{\r\n                                                    __html:\r\n                                                        label,\r\n                                                }}></div>\r\n                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                                <br />\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    )\r\n                                        break;\r\n                                    case 'text': {\r\n                                        console.log(label)\r\n                                        return (\r\n                                            <div className=\"no-label\">\r\n\r\n                                                <Form.Item className=\"adm-ard-result-form-item\">\r\n                                                    <div dangerouslySetInnerHTML={{\r\n                                                        __html:\r\n                                                            label,\r\n                                                    }}></div>\r\n                                                    <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div>\r\n                                                    <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                        className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                </Form.Item>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'heading': {\r\n                                        return (\r\n                                            <Form.Item className=\"adm-ard-result-form-item\">\r\n                                                {label === 'h1' ? <h1>{name}</h1> : label === 'h2' ? <h2>{name}</h2> : label === 'h3' ? <h3>{name}</h3> : label === 'h4' ? <h4>{name}</h4> : label === 'h5' ? <h5>{name}</h5> : <h6>{name}</h6>}\r\n                                                {/* <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div> */}\r\n                                                <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                    className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'checkboxgroup': {\r\n                                        return (\r\n                                            <div className=\"no-label\">\r\n                                                <Form.Item label={label} name={name} rules={[\r\n                                                    { required: required }\r\n                                                ]} className=\"adm-ard-result-form-item\">\r\n                                                    <div dangerouslySetInnerHTML={{\r\n                                                        __html:\r\n                                                            label,\r\n                                                    }}></div>\r\n                                                    <Checkbox.Group>\r\n                                                        {field.values.map(check =>\r\n                                                            <Checkbox value={check}>{check}</Checkbox>)}\r\n                                                    </Checkbox.Group>\r\n                                                    <br />\r\n                                                    <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                        className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                </Form.Item>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'row': {\r\n                                        return (\r\n                                            <div className=\"adm-ard-result-form-item\">\r\n                                                <div className=\"truth-table-row\">\r\n                                                    {field.values.map(value => {\r\n                                                        if (value.startsWith('_switch_')) {\r\n                                                            return (\r\n                                                                <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                                    <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                                                </Form.Item>\r\n\r\n                                                            )\r\n                                                            {/* <Form.Item>\r\n                                                                    <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                                </Form.Item> */}\r\n                                                        }\r\n                                                        else {\r\n                                                            return (\r\n                                                                <Form.Item >\r\n                                                                    <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                                </Form.Item>\r\n                                                            )\r\n                                                        }\r\n                                                    })}\r\n                                                </div>\r\n                                                {\r\n                                                    index == this.state.questions.length - 1 &&\r\n                                                    <>\r\n                                                        <Button danger onClick={() => { this.handleDeleteTable(field.tableID) }}\r\n                                                            className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                    </>\r\n                                                }\r\n                                                {\r\n                                                    index != this.state.questions.length - 1 &&\r\n                                                    this.state.questions[index + 1].type != \"row\" &&\r\n                                                    <>\r\n                                                        <Button danger onClick={() => { this.handleDeleteTable(field.tableID) }}\r\n                                                            className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                    </>\r\n                                                }\r\n                                                {\r\n                                                    index != this.state.questions.length - 1 &&\r\n                                                    this.state.questions[index + 1].type == \"row\" &&\r\n                                                    this.state.questions[index + 1].tableID != field.tableID &&\r\n                                                    <>\r\n                                                        <Button danger onClick={() => { this.handleDeleteTable(field.tableID) }}\r\n                                                            className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                    </>\r\n                                                }\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n\r\n                                    case 'upload': {\r\n                                        return (\r\n                                            <div className=\"no-label\">\r\n                                                <Form.Item name={name} label={label} valuePropName=\"fileList\" getValueFromEvent={normFile} rules={[\r\n                                                    { required: required }]} className=\"adm-ard-result-form-item\">\r\n                                                    <div dangerouslySetInnerHTML={{\r\n                                                        __html:\r\n                                                            label,\r\n                                                    }}></div>\r\n                                                    <Upload>\r\n                                                        <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                                                    </Upload>\r\n                                                    <Button danger onClick={() => { this.handleDeleteItem(field._id ? field._id : field.id) }}\r\n                                                        className=\"adm-ard-result-del-button\">Delete</Button>\r\n                                                </Form.Item>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    default: return null\r\n                                }\r\n                            })\r\n                        }\r\n                        {/* <Form.Item >\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Submit\r\n                </Button>\r\n                        </Form.Item> */}\r\n                    </Form>\r\n                </div>\r\n                <div className=\"form-tools\">\r\n                    <Button type=\"primary\" onClick={this.submitForm}>Save/Update Form</Button>\r\n                    <Button danger onClick={() => this.setState({ questions: [] })}>Delete Form</Button>\r\n                    <Button onClick={() => this.setState({ inputModal: true })}>Input</Button>\r\n                    <Button onClick={() => this.setState({ textareaModal: true })}>Text Area</Button>\r\n                    <Button onClick={() => this.setState({ texteditorModal: true })}>Text Editor(for images)</Button>\r\n                    <Button onClick={() => this.setState({ numberModal: true })}>Input Number</Button>\r\n                    <Button onClick={() => this.setState({ checkboxModal: true })}>Checkbox</Button>\r\n                    <Button onClick={() => this.setState({ checkboxgroupModal: true })}>Checkbox Group</Button>\r\n                    <Button onClick={() => this.setState({ radioModal: true })}>Radio</Button>\r\n                    <Button onClick={() => this.setState({ switchModal: true })}>Switch</Button>\r\n                    <Button onClick={() => this.setState({ textModal: true })}>Text</Button>\r\n                    <Button onClick={() => this.setState({ headingModal: true })}>Heading</Button>\r\n                    <Button onClick={() => this.handleStartTruthTable()}>Table</Button>\r\n                    <Button onClick={() => this.setState({ uploadModal: true })}>Upload</Button>\r\n\r\n\r\n\r\n                </div>\r\n                <Modal\r\n                    visible={this.state.inputModal}\r\n                    title=\"Input\"\r\n                    onCancel={() => this.setState({ inputModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddInput}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textareaModal}\r\n                    title=\"Text Area\"\r\n                    onCancel={() => this.setState({ textareaModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddTextarea}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.texteditorModal}\r\n                    title=\"Text Area\"\r\n                    onCancel={() => this.setState({ texteditorModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddTextEditor}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.numberModal}\r\n                    title=\"Number\"\r\n                    onCancel={() => this.setState({ numberModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddNumber}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxModal}\r\n                    title=\"Check Box\"\r\n                    onCancel={() => this.setState({ checkboxModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckbox}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.switchModal}\r\n                    title=\"Switch\"\r\n                    onCancel={() => this.setState({ switchModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddSwitch}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textModal}\r\n                    title=\"Text\"\r\n                    onCancel={() => this.setState({ textModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddText}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.headingModal}\r\n                    title=\"Heading\"\r\n                    onCancel={() => this.setState({ headingModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddHeading}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <p>*The greater the number , smaller the heading</p>\r\n                        <Form.Item\r\n                            label=\"Heading type\"\r\n                            name=\"type\"\r\n                            rules={[{ required: true }]}>\r\n                            <Radio.Group>\r\n                                <Radio value={'h1'}>h1</Radio>\r\n                                <Radio value={'h2'}>h2</Radio>\r\n                                <Radio value={'h3'}>h3</Radio>\r\n                                <Radio value={'h4'}>h4</Radio>\r\n                                <Radio value={'h5'}>h5</Radio>\r\n                                <Radio value={'h6'}>h6</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxgroupModal}\r\n                    title=\"CheckBox Group\"\r\n                    onCancel={() => this.setState({ checkboxgroupModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckboxgroup}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                                            </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.radioModal}\r\n                    title=\"Radio\"\r\n                    onCancel={() => this.setState({ radioModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddRadio}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                                            </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.tableModal}\r\n                    title=\"Table\"\r\n                    onCancel={() => this.setState({ tableModal: false, tempValue: '', tempTable: [], tempTableID: '' })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handelAddTruthTable}>\r\n\r\n                        <Button onClick={() => this.setState({ headingModal: true })}>Add Heading?</Button>\r\n                        <Form.Item\r\n                            label=\"Value\"\r\n                        >\r\n                            <Input value={this.state.tempValue} onChange={(e) => { this.setState({ tempValue: e.target.value }) }} style={{ width: \"150px\" }} />\r\n                        </Form.Item>\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue, tempTableID } = this.state\r\n                                if (tempValue) {\r\n                                    if (tempTable.length) {\r\n                                        tempTable[tempTable.length - 1].values.push(tempValue)\r\n                                    }\r\n                                    else {\r\n                                        tempTable.push({\r\n                                            type: \"row\",\r\n                                            values: [tempValue],\r\n                                            tableID: tempTableID\r\n                                        })\r\n                                    }\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: ''\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the default value')\r\n                            }}>Add Box</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue, tempTableID } = this.state\r\n                                if (tempValue) {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [tempValue],\r\n                                        tableID: tempTableID\r\n                                    })\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: \"\"\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the defult value')\r\n                            }}>Add Box in next row</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempTableID } = this.state\r\n                                if (tempTable.length) {\r\n                                    tempTable[tempTable.length - 1].values.push(\"_switch_\" + uuid())\r\n                                }\r\n                                else {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [\"_switch_\" + uuid()],\r\n                                        tableID: tempTableID\r\n                                    })\r\n                                }\r\n                                this.setState(\r\n                                    {\r\n                                        tempTable\r\n                                    }\r\n                                )\r\n                            }}>Add user switch</Button>\r\n                        </div>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" onClick={() => this.setState({ tempTableID: '' })}>Confirm</Button>\r\n                        </Form.Item>\r\n                        <h3>Table Preview</h3>\r\n                        <Form>{this.state.tempTable.map(row => (\r\n                            <div className=\"truth-table-row\">\r\n                                {row.values.map(value => {\r\n                                    if (value.startsWith('_switch_')) {\r\n                                        return (\r\n                                            <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                    else {\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                        ))}</Form>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    visible={this.state.uploadModal}\r\n                    title=\"Upload\"\r\n                    onCancel={() => this.setState({ uploadModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddUpload}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <TextEditor />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addResults: bindActionCreators(addResults, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddResults)","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    } else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;\r\n","export const ACTION = {\r\n    GET_ERRORS: \"GET_ERRORS\",\r\n    USER_LOADING: \"USER_LOADING\",\r\n    SET_CURRENT_USER: \"SET_CURRENT_USER\",\r\n    CLEAR_ERRORS: \"CLEAR_ERRORS\"\r\n};","import axios from \"axios\";\r\nimport setAuthToken from \"../../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport { ACTION } from \"./constants\";\r\nimport { baseUrl } from \"../../config\";\r\n\r\n// Login - get user token\r\nexport const loginAdmin = userData => async dispatch => {\r\n    await axios\r\n        .post(`${baseUrl}/api/auth/login-admin`, userData)\r\n        .then(res => {\r\n            // Save to localStorage\r\n\r\n            // Set token to localStorage\r\n            const { token } = res.data;\r\n            localStorage.setItem(\"jwtToken\", token);\r\n            // Set token to Auth header\r\n            setAuthToken(token);\r\n            // Decode token to get user data\r\n            const decoded = jwt_decode(token);\r\n            // Set current user\r\n            dispatch(setCurrentUser(decoded));\r\n        })\r\n        .catch(err => {\r\n            console.log(\"ERROR,\", err);\r\n            dispatch({\r\n                type: ACTION.GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        });\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n    return {\r\n        type: ACTION.SET_CURRENT_USER,\r\n        payload: decoded\r\n    };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n    return {\r\n        type: ACTION.USER_LOADING\r\n    };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n    // Remove token from local storage\r\n    localStorage.removeItem(\"jwtToken\");\r\n    // Remove auth header for future requests\r\n    setAuthToken(false);\r\n    // Set current user to empty object {} which will set isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n    dispatch({\r\n        type: 'LOGOUT'\r\n    })\r\n};\r\n\r\n\r\nexport const clearErrors = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_ERRORS\r\n    })\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Button, Checkbox, Row } from 'antd';\r\nimport './styles.scss';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginAdmin } from './action';\r\n\r\nconst Login = (props) => {\r\n\r\n    useEffect(() => {\r\n        if (props.auth.isAuthenticated) {\r\n            props.history.push(\"/admin\")\r\n        }\r\n    }, [props])\r\n\r\n\r\n    const [loading, setloading] = useState(false)\r\n\r\n    const onFinish = async values => {\r\n        console.log(values)\r\n        setloading(true);\r\n        await props.loginAdmin(values);\r\n        setloading(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"signup-form-container\">\r\n            <h1 style={{ textAlign: 'center', fontSize: 'xx-large' }}>\r\n                LOGIN\r\n            </h1>\r\n            <Row type=\"flex\" justify=\"center\" align=\"middle\" >\r\n                <Form\r\n                    // {...layout}\r\n                    name=\"basic\"\r\n                    initialValues={{\r\n                        remember: true,\r\n                    }}\r\n                    onFinish={onFinish}\r\n                >\r\n                    <Form.Item\r\n                        label=\"E-mail\"\r\n                        name=\"email\"\r\n                        rules={[\r\n                            {\r\n                                type: 'email',\r\n                                message: 'The input is not valid E-mail!',\r\n                            },\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your E-mail!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Password\"\r\n                        name=\"password\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your password!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    // {...tailLayout}\r\n                    >\r\n                        <Button loading={loading} type=\"primary\" htmlType=\"submit\">\r\n                            Submit\r\n                    </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Row>\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.authReducer\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loginAdmin: bindActionCreators(loginAdmin, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, my, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true ? <Component  {...props} /> : (\r\n                <Redirect to=\"/admin/login\" />\r\n            )\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.authReducer\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import { ACTION } from \"./constants\";\r\n\r\nconst initialState = {\r\n    content: ''\r\n}\r\n\r\nconst textEditor2Reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.SET_CONTENT:\r\n            state = { ...state, content: action.payload }\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default textEditor2Reducer;","import { ACTION } from './constants';\r\n\r\nconst initialState = {\r\n    modules: [],\r\n    currentModule: {},\r\n    courseTroubleshoot: [],\r\n    updateModule: false,\r\n    updateSubModule: false,\r\n    deleteSubModule: false,\r\n    deleteModule: false\r\n};\r\n\r\nconst modulesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.GET_MODULES:\r\n            state = { ...state, modules: action.payload };\r\n            break;\r\n        case ACTION.GET_CURRENT_MODULE:\r\n            state = { ...state, currentModule: action.payload };\r\n            break;\r\n        case ACTION.GET_COURSE_TROUBLESHOOT:\r\n            state = { ...state, courseTroubleshoot: action.payload };\r\n            break;\r\n        case ACTION.UPDATE_COURSE:\r\n            state = { ...state, updateModule: true };\r\n            break;\r\n        case ACTION.UPDATE_SUBMOD:\r\n            state = { ...state, updateSubModule: true }\r\n            break;\r\n        case ACTION.DELETE_SUBMOD:\r\n            state = { ...state, deleteSubModule: true }\r\n            break;\r\n        case ACTION.DELETE_MOD:\r\n            state = { ...state, deleteModule: true }\r\n            break;\r\n        case ACTION.CLEAR_CURRENT_MODULE:\r\n            state = { ...state, currentModule: {} };\r\n            break;\r\n        case ACTION.CLEAR_ADMIN_DASH:\r\n            state = { ...initialState };\r\n            break;\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\nexport default modulesReducer;\r\n","import { ACTION } from \"./constants\";\r\n\r\nconst initialState = {\r\n    name: '',\r\n    introduction: '',\r\n    addModuleSuccess: false\r\n}\r\n\r\nconst addModuleReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.ADD_MODULE_SUCCESS:\r\n            state = { ...state, addModuleSuccess: true }\r\n            break;\r\n        case ACTION.SET_MODULE_NAME:\r\n            state = { ...state, name: action.payload }\r\n            break;\r\n        case ACTION.SET_MODULE_INTRODUCTION:\r\n            state = { ...state, introduction: action.payload }\r\n            break;\r\n        case ACTION.CLEAR_ADD_MODULE:\r\n            state = { ...initialState }\r\n            break;\r\n        default:\r\n            state = state;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default addModuleReducer;","import { ACTION } from \"./constants\";\r\n\r\nconst initialState = {\r\n    name: '',\r\n    thumbnailPath: '',\r\n    addCourseSuccess: false\r\n}\r\n\r\nconst addCourseReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.ADD_COURSE_SUCCESS:\r\n            state = { ...state, addCourseSuccess: true }\r\n        case ACTION.SET_COURSE_NAME:\r\n            state = { ...state, name: action.payload }\r\n            break;\r\n        case ACTION.SET_COURSE_THUMBNAIL:\r\n            state = { ...state, thumbnailPath: action.payload }\r\n            break;\r\n        case ACTION.CLEAR_ADD_COURSE:\r\n            state = { ...initialState }\r\n            break;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default addCourseReducer;","const { ACTION } = require(\"./constants\");\r\n\r\nconst initialState = {\r\n    currentCourse: {},\r\n    currentParent: null,\r\n    introductionHtml: '',\r\n    addIntroductionSuccess: false,\r\n\r\n\r\n    buildCircuit: null,\r\n    addBuildCircuitSuccess: false,\r\n\r\n\r\n    experiment: null,\r\n    addExperimentSuccess: false,\r\n\r\n\r\n\r\n    troubleshoot: null,\r\n    addTroubleshootSuccess: false,\r\n\r\n    excercise: null,\r\n    addExcerciseSuccess: false,\r\n\r\n    simulation: null,\r\n    addSimulationSuccess: false,\r\n\r\n    videoembed: null,\r\n    addVideoEmbedSuccess: false\r\n\r\n}\r\n\r\nconst courseReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.GET_CURRENT_COURSE:\r\n            state = { ...state, currentCourse: action.payload }\r\n            break;\r\n        case ACTION.GET_CURRENT_PARENT:\r\n            state = { ...state, currentParent: action.payload }\r\n            break;\r\n        case ACTION.SET_INTRODUCTION_HTML:\r\n            state = { ...state, introductionHtml: action.payload }\r\n            break;\r\n        case ACTION.GET_INTRODCUTION_HTML:\r\n            state = { ...state, introductionHtml: action.payload }\r\n            break;\r\n        case ACTION.ADD_INTRODUCTION_SUCCESS:\r\n            state = { ...state, addIntroductionSuccess: true }\r\n            break;\r\n        case ACTION.CLEAR_INTRODUCTION:\r\n            state = { ...state, introductionHtml: \"\", addIntroductionSuccess: false }\r\n            break;\r\n\r\n\r\n        case ACTION.GET_BUILD_CIRCUIT:\r\n            {\r\n                console.log(\"ehy  am i here\")\r\n                console.log(action.payload)\r\n                state = { ...state, buildCircuit: JSON.parse(JSON.stringify(action.payload)) }\r\n                break;\r\n            }\r\n\r\n        case ACTION.ADD_BUILD_CIRCUIT_SUCCESS:\r\n            {\r\n                console.log(\"add building\")\r\n                state = { ...state, addBuildCircuitSuccess: true }\r\n                break;\r\n            }\r\n\r\n        case ACTION.CLEAR_BUILD_CIRCUIT:\r\n            state = { ...state, buildCircuit: null, addBuildCircuitSuccess: false }\r\n            break;\r\n\r\n\r\n        case ACTION.GET_EXPERIMENT:\r\n            {\r\n                console.log(\"ehy  am i here\")\r\n                console.log(action.payload)\r\n                state = { ...state, experiment: action.payload }\r\n                break;\r\n            }\r\n\r\n        case ACTION.ADD_EXPERIMENT_SUCCESS:\r\n            {\r\n                console.log(\"add building\")\r\n                state = { ...state, addExperimentSuccess: true }\r\n                break;\r\n            }\r\n\r\n        case ACTION.CLEAR_EXPERIMENT:\r\n            state = { ...state, experiment: null, addExperimentSuccess: false }\r\n            break;\r\n\r\n        case ACTION.GET_SIMULATION:\r\n            {\r\n                console.log(\"ehy  am i here\")\r\n                console.log(action.payload)\r\n                state = { ...state, simulation: action.payload }\r\n                break;\r\n            }\r\n\r\n        case ACTION.ADD_SIMULATION_SUCCESS:\r\n            {\r\n                console.log(\"add building\")\r\n                state = { ...state, addSimulationSuccess: true }\r\n                break;\r\n            }\r\n\r\n        case ACTION.CLEAR_SIMULATION:\r\n            state = { ...state, simulation: null, addSimulationSuccess: false }\r\n            break;\r\n\r\n        case ACTION.GET_VIDEOEMBED:\r\n            {\r\n                state = { ...state, videoembed: action.payload }\r\n                break;\r\n            }\r\n\r\n        case ACTION.ADD_VIDEOEMBED_SUCCESS:\r\n            {\r\n                state = { ...state, addVideoEmbedSuccess: true }\r\n                break;\r\n            }\r\n\r\n        case ACTION.CLEAR_VIDEOEMBED:\r\n            state = { ...state, videoembed: null, addVideoEmbedSuccess: false }\r\n            break;\r\n\r\n\r\n        case ACTION.GET_TROUBLESHOOT:\r\n            {\r\n                console.log(\"ehy  am i here\")\r\n                console.log(action.payload)\r\n                state = { ...state, troubleshoot: action.payload }\r\n                break;\r\n            }\r\n\r\n        case ACTION.ADD_TROUBLESHOOT_SUCCESS:\r\n            {\r\n                console.log(\"add building\")\r\n                state = { ...state, addTroubleshootSuccess: true }\r\n                break;\r\n            }\r\n\r\n        case ACTION.CLEAR_TROUBLESHOOT:\r\n            state = { ...state, troubleshoot: null, addTroubleshootSuccess: false }\r\n            break;\r\n\r\n\r\n        case ACTION.GET_EXCERCISE:\r\n            {\r\n                console.log(\"ehy  am i here\")\r\n                console.log(action.payload)\r\n                state = { ...state, excercise: action.payload }\r\n                break;\r\n            }\r\n\r\n        case ACTION.ADD_EXCERCISE_SUCCESS:\r\n            {\r\n                console.log(\"add building\")\r\n                state = { ...state, addExcerciseSuccess: true }\r\n                break;\r\n            }\r\n\r\n        case ACTION.CLEAR_EXCERCISE:\r\n            state = { ...state, excercise: null, addExcerciseSuccess: false }\r\n            break;\r\n\r\n        case ACTION.CLEAR_ADMIN_SUBMODULE:\r\n            state = {\r\n                currentCourse: {},\r\n                currentParent: null,\r\n            }\r\n            break;\r\n\r\n        default:\r\n            state = state;\r\n\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default courseReducer","import { ACTION } from \"./constants\";\r\n\r\nconst isEmpty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false,\r\n    errors: {}\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isEmpty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case ACTION.USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case ACTION.GET_ERRORS:\r\n            return {\r\n                ...state,\r\n                errors: action.payload\r\n            };\r\n        case ACTION.CLEAR_ERRORS:\r\n            return {\r\n                ...state,\r\n                errors: {}\r\n            }\r\n        case 'LOGOUT':\r\n            return {\r\n                ...initialState\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { composeWithDevTools as compose } from \"redux-devtools-extension/developmentOnly\";\r\nimport thunk from \"redux-thunk\"\r\nimport textEditor2Reducer from \"./components/TextEditor2/reducer\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport modulesReducer from \"./components/Modules/reducer\";\r\nimport addModuleReducer from \"./components/Modules/AddModule/reducer\";\r\nimport addCourseReducer from \"./components/Course/AddCourse/reducer\";\r\nimport courseReducer from \"./components/Course/reducer\";\r\nimport authReducer from \"./components/Auth/reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    textEditor2Reducer,\r\n    modulesReducer,\r\n    addModuleReducer,\r\n    addCourseReducer,\r\n    courseReducer,\r\n    authReducer\r\n});\r\n\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\nexport const store = createStore(\r\n    persistedReducer,\r\n    {},\r\n    compose(applyMiddleware(thunk))\r\n)\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\r\nimport \"./App.scss\"\r\nimport TextEditor2 from './components/TextEditor2';\r\nimport LivePreview from './components/TextEditor2/LivePreview';\r\nimport FormBuilder from './components/FormBuilder';\r\nimport 'antd/dist/antd.css';\r\nimport BuildCircuitBuilder from './components/BuildCircuitBuilder';\r\nimport Modules from './components/Modules';\r\nimport { NavLink, withRouter, Route, Switch } from 'react-router-dom';\r\nimport AddModule from './components/Modules/AddModule';\r\nimport AddModuleConf from './components/Starter/AddModule';\r\nimport TextEditor from './components/TextEditor';\r\nimport Module from './components/Modules/Module';\r\nimport AddCourse from './components/Course/AddCourse';\r\nimport Course from './components/Course';\r\nimport AddIntroduction from './components/Course/AddIntroduction';\r\nimport AddExperiment from './components/Course/AddExperiment';\r\nimport AddSimulation from './components/Course/AddSimulation';\r\nimport AddVideoEmbed from './components/Course/AddVideoEmbed';\r\nimport AddTroubleshoot from './components/Course/AddTroubleshoot';\r\nimport AddBuildCircuit from './components/Course/AddBuildCircuit';\r\nimport AddExperimentForm from './components/Course/AddExperimentForm';\r\nimport AddExcercise from './components/Course/AddExcercise';\r\nimport CreatorHome from './components/CreatorHome';\r\nimport AddResults from './components/Course/AddResults';\r\nimport Login from \"./components/Auth/Login\"\r\nimport PrivateRoute from \"./components/Auth/PrivateRoute\"\r\nimport { Menu } from \"antd\";\r\nimport { HomeFilled } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\"\r\nimport { store } from \"./store\"\r\nimport { setCurrentUser, logoutUser, clearErrors } from './components/Auth/action';\r\n\r\n\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n  // Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    store.dispatch(logoutUser());\r\n    window.location.href = \"/admin/login\";\r\n    // Redirect to login\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  static propTypes = {\r\n    location: PropTypes.object.isRequired\r\n  }\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      content: '',\r\n    }\r\n  }\r\n  handleEditorChange = (content, editor) => {\r\n    this.setState({ content })\r\n    // window.localStorage.setItem({ content: e.target.getContent() })\r\n  }\r\n\r\n  render() {\r\n    const { location } = this.props;\r\n    return (\r\n      <div className=\"app\" style={location.pathname == \"/admin\" ? {} : { paddingBottom: \"1px\" }}>\r\n        {/* <TextEditor2 />\r\n        <LivePreview />\r\n        <FormBuilder />\r\n        <BuildCircuitBuilder /> */}\r\n\r\n        {/* <iframe width=\"600px\" height=\"400px\" src=\"https://editor.p5js.org/SoumitroV/embed/Hwq52Cn0t\"></iframe>\r\n        <iframe width=\"600px\" height=\"400px\" src=\"https://circuitverse.org/simulator/embed/248\" id=\"projectPreview\" scrolling=\"no\" webkitAllowFullScreen mozAllowFullScreen allowFullScreen></iframe> */}\r\n        {/* <Modules /> */}\r\n        {/* <div><Link to=\"/admin\">HOME</Link></div> */}\r\n        <Menu theme={location.pathname == \"/admin\" ? \"dark\" : \"light\"}\r\n          style={{ background: location.pathname != \"/admin\" ? \"linear-gradient(to right, #FFFFFF, #ECE9E6)\" : \"\" }}\r\n          mode=\"horizontal\"\r\n          defaultSelectedKeys={['/admin']}\r\n          selectedKeys={[location.pathname]}\r\n          onClick={e => {\r\n            if (e.key == \"logout\") {\r\n              store.dispatch(logoutUser());\r\n            }\r\n          }}\r\n        >\r\n          <Menu.Item key=\"/admin\">\r\n            <NavLink to=\"/admin\">\r\n              <HomeFilled />\r\n              <span>Home</span>\r\n            </NavLink>\r\n          </Menu.Item>\r\n          {localStorage.jwtToken ? <Menu.Item key=\"logout\">\r\n            Logout\r\n          </Menu.Item> : null}\r\n\r\n        </Menu>\r\n        <Switch>\r\n          <Route path=\"/admin/login\" component={Login} />\r\n          <PrivateRoute path=\"/admin/:type/module/:id\" component={Module} />\r\n          <PrivateRoute path=\"/admin/:type/course/introduction/:id\" component={AddIntroduction} />\r\n          <PrivateRoute path=\"/admin/:type/course/experiment/:id\" component={AddExperiment} />\r\n          <PrivateRoute path=\"/admin/:type/course/simulation/:id\" component={AddSimulation} />\r\n          <PrivateRoute path=\"/admin/:type/course/videoembed/:id\" component={AddVideoEmbed} />\r\n          <PrivateRoute path=\"/admin/:type/course/troubleshoot/:id\" component={AddTroubleshoot} />\r\n          <PrivateRoute path=\"/admin/:type/course/build-circuit/:id\" component={AddBuildCircuit} />\r\n          <PrivateRoute path=\"/admin/:type/course/experiment-form/:id/:expId\" component={AddExperimentForm} />\r\n          <PrivateRoute path=\"/admin/:type/course/results/:id\" component={AddResults} />\r\n          <PrivateRoute path=\"/admin/:type/course/excercise/:id\" component={AddExcercise} />\r\n          <PrivateRoute exact path=\"/admin/:type\" component={Modules} />\r\n          <PrivateRoute exact path=\"/admin/:type/course/:id\" component={Course} />\r\n          <PrivateRoute path=\"/admin/:type/add-module\" component={AddModule} />\r\n          <PrivateRoute exact path=\"/admin/:type/add-starter\" component={AddModuleConf} />\r\n          <PrivateRoute path=\"/admin/:type/add-course/:module_id\" component={AddCourse} />\r\n          <PrivateRoute path=\"/admin\" component={CreatorHome} />\r\n        </Switch>\r\n\r\n\r\n\r\n        {/* <TextEditor /> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker === null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store, persistor } from \"./store\"\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <PersistGate persistor={persistor}>\r\n        {/* <React.StrictMode> */}\r\n          <App />\r\n        {/* </React.StrictMode> */}\r\n      </PersistGate>\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}